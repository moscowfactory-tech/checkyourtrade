// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É strategies
console.log('üîß Loading column addition module...');

async function addMissingColumns() {
    try {
        console.log('üîß Adding missing columns to strategies table...');
        
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå Supabase client not available');
            return false;
        }
        
        // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã
        const alterQueries = [
            'ALTER TABLE strategies ADD COLUMN IF NOT EXISTS is_public BOOLEAN DEFAULT FALSE',
            'ALTER TABLE strategies ADD COLUMN IF NOT EXISTS user_id UUID',
            'ALTER TABLE strategies ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()'
        ];
        
        for (const query of alterQueries) {
            try {
                console.log('üîß Executing:', query);
                
                // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ rpc
                const { data, error } = await window.supabase
                    .rpc('exec_sql', { sql: query })
                    .catch(() => ({ data: null, error: 'RPC not available' }));
                
                if (error && error !== 'RPC not available') {
                    console.log('‚ö†Ô∏è RPC error:', error);
                } else if (error === 'RPC not available') {
                    console.log('‚ö†Ô∏è RPC not available, manual SQL needed');
                } else {
                    console.log('‚úÖ Query executed successfully');
                }
            } catch (err) {
                console.log('‚ö†Ô∏è Error executing query:', err.message);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∏
        console.log('üîç Checking if columns were added...');
        await checkTableStructure();
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error adding columns:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
async function updateExistingRecords() {
    try {
        console.log('üîÑ Updating existing records...');
        
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå Supabase client not available');
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è is_public = false –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        const { data, error } = await window.supabase
            .from('strategies')
            .update({ 
                is_public: false,
                updated_at: new Date().toISOString()
            })
            .is('is_public', null);
            
        if (error) {
            console.error('‚ùå Error updating records:', error);
            return false;
        }
        
        console.log('‚úÖ Updated existing records:', data);
        return true;
        
    } catch (error) {
        console.error('‚ùå Error updating records:', error);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.addMissingColumns = addMissingColumns;
window.updateExistingRecords = updateExistingRecords;

console.log('‚úÖ Column addition module loaded');
console.log('Available commands:');
console.log('- await addMissingColumns() - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏');
console.log('- await updateExistingRecords() - –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏');
