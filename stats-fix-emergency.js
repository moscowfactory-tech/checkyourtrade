// –≠–ö–°–¢–†–ï–ù–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
console.log('üî• EMERGENCY stats fix loaded');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
let statsUpdateAttempts = 0;
let statsUpdateSuccess = false;

// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function emergencyUpdateStats() {
    console.log('üî• EMERGENCY stats update attempt #' + (++statsUpdateAttempts));
    
    const analysesCountEl = document.getElementById('analysesCount');
    const strategiesCountEl = document.getElementById('strategiesCount');
    
    if (!analysesCountEl || !strategiesCountEl) {
        console.error('üî• EMERGENCY: Stats elements not found, will retry');
        return false;
    }
    
    let analysesCount = 0;
    let strategiesCount = 0;
    
    try {
        // –ü–†–Ø–ú–û–ô –¥–æ—Å—Ç—É–ø –∫ DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º
        analysesCountEl.textContent = '...';
        strategiesCountEl.textContent = '...';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Supabase
        if (window.supabase) {
            try {
                console.log('üî• EMERGENCY: Checking Supabase connection');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase
                const { data: healthCheck } = await window.supabase.from('analyses').select('id').limit(1);
                console.log('üî• EMERGENCY: Supabase health check:', !!healthCheck);
                
                // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let userId = null;
                if (typeof window.getCurrentUserId === 'function') {
                    userId = window.getCurrentUserId();
                } else if (localStorage.getItem('userId')) {
                    userId = localStorage.getItem('userId');
                }
                
                console.log('üî• EMERGENCY: User ID:', userId);
                
                if (userId) {
                    // –°—á–∏—Ç–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã
                    const { count, error } = await window.supabase
                        .from('analyses')
                        .select('*', { count: 'exact', head: true })
                        .eq('user_id', userId);
                    
                    if (error) {
                        console.error('üî• EMERGENCY: Supabase error:', error);
                    } else if (count !== null) {
                        analysesCount = count;
                        console.log('üî• EMERGENCY: Analyses count from DB:', analysesCount);
                    }
                }
            } catch (supabaseError) {
                console.error('üî• EMERGENCY: Supabase access error:', supabaseError);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Supabase, –ø—Ä–æ–±—É–µ–º –∏–∑ localStorage
        if (analysesCount === 0) {
            console.log('üî• EMERGENCY: Trying localStorage for analyses');
            try {
                const savedAnalyses = localStorage.getItem('savedAnalyses');
                if (savedAnalyses) {
                    const parsed = JSON.parse(savedAnalyses);
                    if (Array.isArray(parsed)) {
                        analysesCount = parsed.length;
                        console.log('üî• EMERGENCY: Analyses from localStorage:', analysesCount);
                    }
                }
            } catch (e) {
                console.error('üî• EMERGENCY: localStorage error:', e);
            }
        }
        
        // –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ window.strategies
        if (window.strategies && Array.isArray(window.strategies)) {
            strategiesCount = window.strategies.length;
            console.log('üî• EMERGENCY: Strategies from window:', strategiesCount);
        } else {
            // –ü—Ä–æ–±—É–µ–º –∏–∑ localStorage
            try {
                const savedStrategies = localStorage.getItem('strategies');
                if (savedStrategies) {
                    const parsed = JSON.parse(savedStrategies);
                    if (Array.isArray(parsed)) {
                        strategiesCount = parsed.length;
                        console.log('üî• EMERGENCY: Strategies from localStorage:', strategiesCount);
                    }
                }
            } catch (e) {
                console.error('üî• EMERGENCY: localStorage error for strategies:', e);
            }
        }
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º DOM
        analysesCountEl.textContent = analysesCount.toString();
        strategiesCountEl.textContent = strategiesCount.toString();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —á–∏—Å–ª–∞ –≤–∏–¥–Ω—ã
        analysesCountEl.style.color = '#00ff00';
        strategiesCountEl.style.color = '#00ff00';
        
        console.log('üî• EMERGENCY: Stats updated successfully:', {
            analyses: analysesCount,
            strategies: strategiesCount
        });
        
        statsUpdateSuccess = true;
        return true;
    } catch (error) {
        console.error('üî• EMERGENCY: Critical error updating stats:', error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
        if (analysesCountEl) analysesCountEl.textContent = '0';
        if (strategiesCountEl) strategiesCountEl.textContent = '0';
        
        return false;
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π
window.emergencyUpdateStats = emergencyUpdateStats;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    console.log('üî• EMERGENCY: DOM loaded, scheduling immediate stats update');
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setTimeout(emergencyUpdateStats, 500);
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
    const statsInterval = setInterval(() => {
        if (statsUpdateSuccess || statsUpdateAttempts >= 10) {
            console.log('üî• EMERGENCY: Stopping automatic updates, success:', statsUpdateSuccess);
            clearInterval(statsInterval);
        } else {
            emergencyUpdateStats();
        }
    }, 2000);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
document.addEventListener('DOMContentLoaded', function() {
    const userButton = document.querySelector('.user-button');
    if (userButton) {
        console.log('üî• EMERGENCY: Adding profile click handler');
        userButton.addEventListener('click', function() {
            console.log('üî• EMERGENCY: Profile clicked, updating stats');
            emergencyUpdateStats();
        });
    }
});

console.log('üî• EMERGENCY stats fix initialized');
