// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
console.log('üîç Starting strategies debug...');

async function debugStrategies() {
    try {
        console.log('üîç Debugging strategies loading...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        if (typeof supabase === 'undefined') {
            console.error('‚ùå Supabase client not available');
            return;
        }
        
        console.log('‚úÖ Supabase client available');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É strategies
        console.log('üìä Checking strategies table...');
        const { data: strategiesData, error: strategiesError } = await supabase
            .from('strategies')
            .select('*')
            .order('created_at', { ascending: false });
            
        if (strategiesError) {
            console.error('‚ùå Error loading strategies:', strategiesError);
            return;
        }
        
        console.log(`üìã Found ${strategiesData.length} strategies in database:`);
        strategiesData.forEach((strategy, index) => {
            console.log(`${index + 1}. ID: ${strategy.id}, Name: "${strategy.name}"`);
            console.log(`   Description: "${strategy.description}"`);
            console.log(`   Fields type: ${typeof strategy.fields}`);
            if (strategy.fields) {
                console.log(`   Fields content:`, strategy.fields);
            }
            console.log(`   Created: ${strategy.created_at}`);
            console.log('---');
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é StrategyDB.getAll()
        console.log('üîç Testing StrategyDB.getAll()...');
        if (typeof StrategyDB !== 'undefined' && StrategyDB.getAll) {
            const strategies = await StrategyDB.getAll();
            console.log(`üìã StrategyDB.getAll() returned ${strategies.length} strategies:`);
            strategies.forEach((strategy, index) => {
                console.log(`${index + 1}. ID: ${strategy.id}, Name: "${strategy.name}"`);
                console.log(`   Fields count: ${strategy.fields ? strategy.fields.length : 0}`);
            });
        } else {
            console.error('‚ùå StrategyDB.getAll() not available');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é strategies
        console.log('üîç Checking global strategies variable...');
        if (typeof strategies !== 'undefined') {
            console.log(`üìã Global strategies array has ${strategies.length} items:`);
            strategies.forEach((strategy, index) => {
                console.log(`${index + 1}. ID: ${strategy.id}, Name: "${strategy.name}"`);
            });
        } else {
            console.error('‚ùå Global strategies variable not defined');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        console.log('üîç Checking strategies display...');
        const strategiesContainer = document.getElementById('strategiesContainer');
        if (strategiesContainer) {
            console.log(`üìã Strategies container found, children: ${strategiesContainer.children.length}`);
            console.log('Container HTML:', strategiesContainer.innerHTML.substring(0, 200) + '...');
        } else {
            console.error('‚ùå Strategies container not found');
        }
        
        console.log('‚úÖ Debug completed');
        
    } catch (error) {
        console.error('‚ùå Debug failed:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async function reloadStrategies() {
    try {
        console.log('üîÑ Reloading strategies...');
        
        if (typeof loadDataFromDatabase === 'function') {
            const dbData = await loadDataFromDatabase();
            if (typeof strategies !== 'undefined') {
                strategies.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
                strategies.push(...dbData.strategies); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                console.log(`‚úÖ Reloaded ${strategies.length} strategies`);
                
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (typeof renderStrategies === 'function') {
                    renderStrategies();
                }
                if (typeof updateStrategySelect === 'function') {
                    updateStrategySelect();
                }
            }
        }
    } catch (error) {
        console.error('‚ùå Reload failed:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async function addTestStrategies() {
    try {
        console.log('üìù Adding test strategies...');
        
        const testStrategy = {
            name: "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è " + new Date().getTime(),
            description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
            fields: [
                {
                    name: "–¢–µ—Å—Ç–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
                    description: "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è",
                    inputs: [
                        {
                            type: "select",
                            label: "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
                            required: true,
                            options: ["–î–∞", "–ù–µ—Ç", "–ù–µ –∑–Ω–∞—é"]
                        }
                    ]
                }
            ]
        };
        
        if (typeof StrategyDB !== 'undefined' && StrategyDB.create) {
            const result = await StrategyDB.create(testStrategy);
            if (result) {
                console.log('‚úÖ Test strategy created:', result);
                await reloadStrategies();
            } else {
                console.error('‚ùå Failed to create test strategy');
            }
        } else {
            console.error('‚ùå StrategyDB.create not available');
        }
        
    } catch (error) {
        console.error('‚ùå Add test strategy failed:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.debugStrategies = debugStrategies;
window.reloadStrategies = reloadStrategies;
window.addTestStrategies = addTestStrategies;

console.log('‚úÖ Debug strategies module loaded');
console.log('Available commands:');
console.log('- await debugStrategies() - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
console.log('- await reloadStrategies() - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π');
console.log('- await addTestStrategies() - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
