// ========================================
// DATABASE VALIDATOR v1.0
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î
// ========================================

class DatabaseValidator {
    constructor(supabaseClient) {
        this.supabase = supabaseClient;
        this.requiredTables = ['users', 'strategies', 'analysis_results'];
        this.isValid = false;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    async validateDatabase() {
        console.log('üîç DATABASE VALIDATOR: Starting validation...');
        
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            const connectionTest = await this.testConnection();
            if (!connectionTest.success) {
                return this.createValidationResult(false, 'Connection failed', connectionTest.error);
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            const tablesTest = await this.validateTables();
            if (!tablesTest.success) {
                return this.createValidationResult(false, 'Tables validation failed', tablesTest.error);
            }

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
            const structureTest = await this.validateTableStructure();
            if (!structureTest.success) {
                return this.createValidationResult(false, 'Structure validation failed', structureTest.error);
            }

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã
            const versionTest = await this.validateSchemaVersion();
            
            this.isValid = true;
            console.log('‚úÖ DATABASE VALIDATOR: All checks passed');
            
            return this.createValidationResult(true, 'Database is valid', {
                connection: connectionTest,
                tables: tablesTest,
                structure: structureTest,
                version: versionTest
            });

        } catch (error) {
            console.error('‚ùå DATABASE VALIDATOR: Unexpected error:', error);
            return this.createValidationResult(false, 'Validation error', error);
        }
    }

    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    async testConnection() {
        try {
            const { data, error } = await this.supabase
                .from('schema_version')
                .select('version')
                .limit(1);

            if (error) {
                return { success: false, error: error.message };
            }

            return { success: true, data: 'Connection OK' };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    async validateTables() {
        const results = {};
        
        for (const tableName of this.requiredTables) {
            try {
                const { data, error } = await this.supabase
                    .from(tableName)
                    .select('*')
                    .limit(1);

                if (error && error.code === 'PGRST116') {
                    // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                    results[tableName] = { exists: false, error: 'Table not found' };
                } else if (error) {
                    // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    results[tableName] = { exists: false, error: error.message };
                } else {
                    // –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    results[tableName] = { exists: true, records: data ? data.length : 0 };
                }
            } catch (error) {
                results[tableName] = { exists: false, error: error.message };
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const missingTables = Object.entries(results)
            .filter(([table, result]) => !result.exists)
            .map(([table]) => table);

        if (missingTables.length > 0) {
            return {
                success: false,
                error: `Missing tables: ${missingTables.join(', ')}`,
                details: results
            };
        }

        return { success: true, data: results };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    async validateTableStructure() {
        const expectedStructure = {
            users: ['id', 'telegram_id', 'username', 'first_name', 'created_at'],
            strategies: ['id', 'name', 'description', 'fields', 'user_id', 'created_at'],
            analysis_results: ['id', 'strategy_id', 'user_id', 'results', 'created_at']
        };

        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–ª–æ–Ω–æ–∫
        return { success: true, data: 'Structure validation skipped' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ —Å—Ö–µ–º—ã
    async validateSchemaVersion() {
        try {
            const { data, error } = await this.supabase
                .from('schema_version')
                .select('version, applied_at')
                .order('applied_at', { ascending: false })
                .limit(1);

            if (error) {
                return { success: false, error: error.message };
            }

            const currentVersion = data && data.length > 0 ? data[0].version : 'unknown';
            return { success: true, data: { version: currentVersion } };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    createValidationResult(isValid, message, details) {
        return {
            isValid,
            message,
            details,
            timestamp: new Date().toISOString(),
            validator: 'DatabaseValidator v1.0'
        };
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    async autoFix() {
        console.log('üîß DATABASE VALIDATOR: Attempting auto-fix...');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
        
        return { success: false, message: 'Auto-fix not implemented yet' };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    getValidationStatus() {
        return {
            isValid: this.isValid,
            lastCheck: this.lastCheck || null
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async function quickDatabaseCheck(supabaseClient) {
    const validator = new DatabaseValidator(supabaseClient);
    const result = await validator.validateDatabase();
    
    if (result.isValid) {
        console.log('‚úÖ Database is ready');
        return true;
    } else {
        console.error('‚ùå Database validation failed:', result.message);
        console.error('Details:', result.details);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
    window.DatabaseValidator = DatabaseValidator;
    window.quickDatabaseCheck = quickDatabaseCheck;
}

console.log('üìä Database Validator loaded');
