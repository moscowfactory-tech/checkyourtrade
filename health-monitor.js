// üè• HEALTH MONITOR - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç

class HealthMonitor {
    constructor() {
        this.checks = {
            userManager: false,
            apiConnection: false,
            buttonsAttached: false,
            lastCheck: null
        };
        this.failureCount = 0;
        this.maxFailures = 3;
        this.checkInterval = null;
        this.isRecovering = false;
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    start() {
        console.log('üè• Health Monitor started');
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => this.performHealthCheck(), 2000);
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.checkInterval = setInterval(() => {
            this.performHealthCheck();
        }, 30000);
    }

    // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
    async performHealthCheck() {
        console.log('üè• Performing health check...');
        this.checks.lastCheck = new Date().toISOString();
        
        const results = {
            userManager: this.checkUserManager(),
            apiConnection: await this.checkAPIConnection(),
            buttonsAttached: this.checkButtons()
        };

        this.checks = { ...this.checks, ...results };
        
        const allHealthy = Object.values(results).every(v => v === true);
        
        if (allHealthy) {
            console.log('‚úÖ Health check passed - all systems operational');
            this.failureCount = 0;
            this.hideErrorBanner();
        } else {
            console.error('‚ùå Health check failed:', results);
            this.failureCount++;
            
            if (this.failureCount >= this.maxFailures && !this.isRecovering) {
                console.error('üö® CRITICAL: Multiple health check failures detected');
                this.attemptRecovery();
            } else {
                this.showErrorBanner('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
            }
        }
        
        return allHealthy;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ UserManager
    checkUserManager() {
        const exists = !!(window.userManager);
        const initialized = window.userManager?.isInitialized;
        const hasUserId = !!(window.userManager?.getUserId());
        
        console.log('üè• UserManager check:', { exists, initialized, hasUserId });
        
        return exists && initialized && hasUserId;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    async checkAPIConnection() {
        try {
            const API_URL = 'https://concerts-achievements-speak-wealth.trycloudflare.com/api';
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);
            
            const response = await fetch(`${API_URL}/health`, {
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (response.ok) {
                const data = await response.json();
                const healthy = data.status === 'healthy';
                console.log('üè• API check:', healthy ? '‚úÖ Healthy' : '‚ùå Unhealthy');
                return healthy;
            }
            
            console.log('üè• API check: ‚ùå Bad response');
            return false;
        } catch (error) {
            console.error('üè• API check failed:', error.message);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫
    checkButtons() {
        const criticalButtons = [
            'createStrategyBtn',
            'createAnalysisBtn'
        ];
        
        const results = criticalButtons.map(id => {
            const btn = document.getElementById(id);
            const exists = !!btn;
            const hasListener = btn?.onclick !== null || btn?.hasAttribute('data-section');
            return { id, exists, hasListener };
        });
        
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å data-section
        const sectionButtons = document.querySelectorAll('[data-section]');
        const hasSectionButtons = sectionButtons.length > 0;
        
        const allOk = results.every(r => r.exists) && hasSectionButtons;
        
        console.log('üè• Buttons check:', allOk ? '‚úÖ All attached' : '‚ö†Ô∏è Some optional missing', {
            critical: results,
            sectionButtons: sectionButtons.length
        });
        
        return allOk;
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    async attemptRecovery() {
        if (this.isRecovering) {
            console.log('üè• Recovery already in progress');
            return;
        }
        
        this.isRecovering = true;
        console.log('üöë Attempting automatic recovery...');
        
        this.showErrorBanner('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...');
        
        try {
            // 1. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserManager
            if (!this.checks.userManager) {
                console.log('üöë Step 1: Reinitializing UserManager...');
                if (window.userManager) {
                    await window.userManager.initialize();
                    await window.userManager.ensureUserInDatabase();
                }
            }
            
            // 2. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            if (!this.checks.buttonsAttached) {
                console.log('üöë Step 2: Reattaching buttons...');
                if (typeof initializeButtonsImmediately === 'function') {
                    initializeButtonsImmediately();
                }
            }
            
            // 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            await new Promise(resolve => setTimeout(resolve, 2000));
            const recovered = await this.performHealthCheck();
            
            if (recovered) {
                console.log('‚úÖ Recovery successful!');
                this.showSuccessBanner('–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.');
                this.failureCount = 0;
            } else {
                console.error('‚ùå Recovery failed');
                this.showErrorBanner(
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
                    true // –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                );
            }
        } catch (error) {
            console.error('‚ùå Recovery error:', error);
            this.showErrorBanner(
                '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
                true
            );
        } finally {
            this.isRecovering = false;
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä —Å –æ—à–∏–±–∫–æ–π
    showErrorBanner(message, showReloadButton = false) {
        let banner = document.getElementById('healthErrorBanner');
        
        if (!banner) {
            banner = document.createElement('div');
            banner.id = 'healthErrorBanner';
            banner.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                background: #f56565;
                color: white;
                padding: 12px 20px;
                text-align: center;
                z-index: 10000;
                font-size: 14px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            `;
            document.body.prepend(banner);
        }
        
        banner.innerHTML = `
            <strong>‚ö†Ô∏è ${message}</strong>
            ${showReloadButton ? '<button onclick="location.reload()" style="margin-left: 10px; padding: 5px 15px; background: white; color: #f56565; border: none; border-radius: 4px; cursor: pointer; font-weight: 600;">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>' : ''}
        `;
        banner.style.display = 'block';
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—Ö–∞
    showSuccessBanner(message) {
        let banner = document.getElementById('healthErrorBanner');
        
        if (!banner) {
            banner = document.createElement('div');
            banner.id = 'healthErrorBanner';
            banner.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                background: #48bb78;
                color: white;
                padding: 12px 20px;
                text-align: center;
                z-index: 10000;
                font-size: 14px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            `;
            document.body.prepend(banner);
        }
        
        banner.style.background = '#48bb78';
        banner.innerHTML = `<strong>‚úÖ ${message}</strong>`;
        banner.style.display = 'block';
        
        // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => this.hideErrorBanner(), 5000);
    }

    // –°–∫—Ä—ã—Ç—å –±–∞–Ω–Ω–µ—Ä
    hideErrorBanner() {
        const banner = document.getElementById('healthErrorBanner');
        if (banner) {
            banner.style.display = 'none';
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    stop() {
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }
        console.log('üè• Health Monitor stopped');
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    getStatus() {
        return {
            ...this.checks,
            failureCount: this.failureCount,
            isRecovering: this.isRecovering
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.healthMonitor = new HealthMonitor();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.healthMonitor.start();
    });
} else {
    window.healthMonitor.start();
}

console.log('üè• Health Monitor module loaded');
