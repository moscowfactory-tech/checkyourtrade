// üîç TELEGRAM WEBAPP DIAGNOSTICS - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º

console.log('üîç TELEGRAM DIAGNOSTICS: Starting...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
function runTelegramDiagnostics() {
    const results = {
        timestamp: new Date().toISOString(),
        environment: {},
        telegram: {},
        user: {},
        database: {},
        issues: [],
        recommendations: []
    };

    console.log('üîç === TELEGRAM WEBAPP DIAGNOSTICS ===');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    results.environment = {
        userAgent: navigator.userAgent,
        isTelegramWebApp: !!(window.Telegram && window.Telegram.WebApp),
        windowTelegram: !!window.Telegram,
        telegramWebApp: !!window.Telegram?.WebApp,
        IS_TELEGRAM_WEBAPP: typeof IS_TELEGRAM_WEBAPP !== 'undefined' ? IS_TELEGRAM_WEBAPP : 'undefined'
    };

    console.log('üåç Environment:', results.environment);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        results.telegram = {
            isAvailable: true,
            version: tg.version || 'unknown',
            platform: tg.platform || 'unknown',
            colorScheme: tg.colorScheme || 'unknown',
            isExpanded: tg.isExpanded || false,
            viewportHeight: tg.viewportHeight || 0,
            initData: !!tg.initData,
            initDataUnsafe: !!tg.initDataUnsafe,
            user: tg.initDataUnsafe?.user || null
        };

        if (!tg.initDataUnsafe?.user) {
            results.issues.push('‚ùå No Telegram user data available');
            results.recommendations.push('üîß Check if WebApp is properly configured in BotFather');
        }
    } else {
        results.telegram.isAvailable = false;
        results.issues.push('‚ùå Telegram WebApp API not available');
    }

    console.log('üì± Telegram:', results.telegram);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (window.userManager) {
        const user = window.userManager.getCurrentUser();
        results.user = {
            managerExists: true,
            isInitialized: window.userManager.isInitialized,
            currentUser: user,
            userId: window.userManager.getUserId(),
            telegramId: window.userManager.getTelegramId(),
            displayName: window.userManager.getDisplayName()
        };

        if (!user) {
            results.issues.push('‚ùå User Manager: No current user');
        }
    } else {
        results.user.managerExists = false;
        results.issues.push('‚ùå User Manager not found');
    }

    console.log('üë§ User:', results.user);

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    results.database = {
        supabaseExists: !!window.supabase,
        supabaseFrom: window.supabase ? typeof window.supabase.from === 'function' : false
    };

    if (!window.supabase) {
        results.issues.push('‚ùå Supabase client not available');
        results.recommendations.push('üîß Check supabase-config.js loading');
    }

    console.log('üíæ Database:', results.database);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const criticalElements = [
        'createStrategyBtn',
        'strategyModal', 
        'strategyForm',
        'myStrategiesBtn',
        'profileBtn'
    ];

    results.dom = {};
    criticalElements.forEach(id => {
        const element = document.getElementById(id);
        results.dom[id] = {
            exists: !!element,
            disabled: element ? element.disabled : null,
            onclick: element ? !!element.onclick : null
        };

        if (!element) {
            results.issues.push(`‚ùå Critical element #${id} not found`);
        } else if (element.disabled) {
            results.issues.push(`‚ö†Ô∏è Element #${id} is disabled`);
        }
    });

    console.log('üèóÔ∏è DOM Elements:', results.dom);

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    if (typeof strategies !== 'undefined') {
        results.strategies = {
            arrayExists: true,
            count: strategies.length,
            data: strategies.slice(0, 2) // –ü–µ—Ä–≤—ã–µ 2 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        };
    } else {
        results.strategies = { arrayExists: false };
        results.issues.push('‚ùå Strategies array not found');
    }

    console.log('üìä Strategies:', results.strategies);

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('üìã === DIAGNOSTIC SUMMARY ===');
    console.log('‚úÖ Working:', Object.keys(results).filter(key => 
        key !== 'issues' && key !== 'recommendations' && key !== 'timestamp'
    ).length);
    console.log('‚ùå Issues found:', results.issues.length);
    
    if (results.issues.length > 0) {
        console.log('üö® ISSUES:');
        results.issues.forEach(issue => console.log(issue));
        
        if (results.recommendations.length > 0) {
            console.log('üí° RECOMMENDATIONS:');
            results.recommendations.forEach(rec => console.log(rec));
        }
    } else {
        console.log('üéâ No critical issues found!');
    }

    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
function testButtons() {
    console.log('üîò TESTING BUTTONS...');
    
    const buttons = ['createStrategyBtn', 'myStrategiesBtn', 'profileBtn'];
    
    buttons.forEach(btnId => {
        const btn = document.getElementById(btnId);
        if (btn) {
            console.log(`üîò ${btnId}:`, {
                exists: true,
                disabled: btn.disabled,
                onclick: !!btn.onclick,
                addEventListener: typeof btn.addEventListener === 'function',
                style: {
                    display: btn.style.display || getComputedStyle(btn).display,
                    pointerEvents: getComputedStyle(btn).pointerEvents
                }
            });
        } else {
            console.log(`‚ùå ${btnId}: not found`);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async function testStrategiesLoad() {
    console.log('üìä TESTING STRATEGIES LOAD...');
    
    if (!window.supabase) {
        console.log('‚ùå Supabase not available');
        return;
    }

    if (!window.userManager || !window.userManager.isInitialized) {
        console.log('‚ùå User manager not initialized');
        return;
    }

    const userId = window.userManager.getUserId();
    console.log('üë§ Testing with user ID:', userId);

    try {
        const { data, error } = await window.supabase
            .from('strategies')
            .select('*')
            .eq('user_id', userId);

        console.log('üìä Strategies query result:', { data, error });
        
        if (error) {
            console.log('‚ùå Database error:', error);
        } else {
            console.log('‚úÖ Found strategies:', data?.length || 0);
        }
    } catch (err) {
        console.log('‚ùå Exception during strategies load:', err);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
setTimeout(() => {
    console.log('üîç Auto-running diagnostics...');
    runTelegramDiagnostics();
    testButtons();
    
    // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(testStrategiesLoad, 2000);
}, 1000);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function createTestStrategy() {
    console.log('üß™ CREATING TEST STRATEGY...');
    
    if (!window.supabase) {
        console.log('‚ùå Supabase not available');
        return;
    }

    if (!window.userManager || !window.userManager.isInitialized) {
        console.log('‚ùå User manager not initialized');
        return;
    }

    const userId = window.userManager.getUserId();
    console.log('üë§ Creating test strategy for user:', userId);

    if (!userId) {
        console.log('‚ùå No user ID available');
        return;
    }

    try {
        const testStrategy = {
            name: 'Test Strategy ' + Date.now(),
            description: 'Automatically created test strategy',
            fields: [
                {
                    name: 'Test Field',
                    description: 'Test field description',
                    inputs: [
                        {
                            type: 'text',
                            label: 'Test Input',
                            required: true
                        }
                    ]
                }
            ],
            user_id: userId
        };

        console.log('üìù Test strategy data:', testStrategy);

        const { data, error } = await window.supabase
            .from('strategies')
            .insert(testStrategy)
            .select()
            .single();

        if (error) {
            console.log('‚ùå Error creating test strategy:', error);
        } else {
            console.log('‚úÖ Test strategy created successfully:', data);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if (typeof loadStrategiesFromDatabase === 'function') {
                await loadStrategiesFromDatabase();
            }
        }
    } catch (err) {
        console.log('‚ùå Exception creating test strategy:', err);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
window.runTelegramDiagnostics = runTelegramDiagnostics;
window.testButtons = testButtons;
window.testStrategiesLoad = testStrategiesLoad;
window.createTestStrategy = createTestStrategy;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
async function checkUsersInDatabase() {
    console.log('üë• CHECKING USERS IN DATABASE...');
    
    if (!window.supabase) {
        console.log('‚ùå Supabase not available');
        return;
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const { data: allUsers, error: allError } = await window.supabase
            .from('users')
            .select('*');

        console.log('üë• All users in database:', allUsers);
        console.log('üë• Users count:', allUsers?.length || 0);

        if (window.userManager && window.userManager.isInitialized) {
            const currentUser = window.userManager.getCurrentUser();
            const telegramId = window.userManager.getTelegramId();
            const userId = window.userManager.getUserId();
            
            console.log('üë§ Current user from UserManager:', currentUser);
            console.log('üë§ Telegram ID:', telegramId);
            console.log('üë§ User UUID:', userId);

            if (telegramId) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const { data: specificUser, error: specificError } = await window.supabase
                    .from('users')
                    .select('*')
                    .eq('telegram_id', telegramId)
                    .single();

                console.log('üë§ Specific user lookup:', { specificUser, specificError });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        const { data: allStrategies, error: strategiesError } = await window.supabase
            .from('strategies')
            .select('*');

        console.log('üìä All strategies in database:', allStrategies);
        console.log('üìä Strategies count:', allStrategies?.length || 0);

    } catch (err) {
        console.log('‚ùå Exception checking database:', err);
    }
}

window.checkUsersInDatabase = checkUsersInDatabase;

console.log('üîç Telegram diagnostics loaded.');
console.log('üîß Available functions:');
console.log('  - runTelegramDiagnostics() - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
console.log('  - testButtons() - —Ç–µ—Å—Ç –∫–Ω–æ–ø–æ–∫');
console.log('  - testStrategiesLoad() - —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π');
console.log('  - createTestStrategy() - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
console.log('  - checkUsersInDatabase() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î');
