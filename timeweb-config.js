// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TIMEWEB POSTGRESQL
// –ó–∞–º–µ–Ω–∞ –¥–ª—è supabase-config.js

const TIMEWEB_CONFIG = {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –Ω–∞ Timeweb
    host: 'your-server.timeweb.ru', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ö–æ—Å—Ç
    port: 5432,
    database: 'tradeanalyzer',
    username: 'tradeanalyzer_app',
    password: 'SECURE_PASSWORD_HERE', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    ssl: true,
    
    // API endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    apiUrl: 'https://your-server.timeweb.ru/api',
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    development: {
        host: 'localhost',
        port: 5432,
        database: 'tradeanalyzer_dev'
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Timeweb PostgreSQL
class TimewebClient {
    constructor(config) {
        this.config = config;
        this.apiUrl = config.apiUrl;
    }
    
    // –≠–º—É–ª—è—Ü–∏—è Supabase API –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    from(table) {
        return new TimewebTable(table, this.apiUrl);
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    async query(sql, params = []) {
        try {
            const response = await fetch(`${this.apiUrl}/query`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ sql, params })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            return { data: result.rows, error: null };
        } catch (error) {
            console.error('Database query error:', error);
            return { data: null, error: error.message };
        }
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ (—ç–º—É–ª—è—Ü–∏—è Supabase)
class TimewebTable {
    constructor(tableName, apiUrl) {
        this.tableName = tableName;
        this.apiUrl = apiUrl;
        this.selectColumns = '*';
        this.whereConditions = [];
        this.orderByClause = '';
        this.limitClause = '';
    }
    
    select(columns = '*') {
        this.selectColumns = columns;
        return this;
    }
    
    eq(column, value) {
        this.whereConditions.push(`${column} = '${value}'`);
        return this;
    }
    
    order(column, options = {}) {
        const direction = options.ascending === false ? 'DESC' : 'ASC';
        this.orderByClause = `ORDER BY ${column} ${direction}`;
        return this;
    }
    
    limit(count) {
        this.limitClause = `LIMIT ${count}`;
        return this;
    }
    
    single() {
        this.limitClause = 'LIMIT 1';
        this.returnSingle = true;
        return this;
    }
    
    async execute() {
        try {
            let sql = `SELECT ${this.selectColumns} FROM ${this.tableName}`;
            
            if (this.whereConditions.length > 0) {
                sql += ` WHERE ${this.whereConditions.join(' AND ')}`;
            }
            
            if (this.orderByClause) {
                sql += ` ${this.orderByClause}`;
            }
            
            if (this.limitClause) {
                sql += ` ${this.limitClause}`;
            }
            
            const response = await fetch(`${this.apiUrl}/query`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ sql })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (this.returnSingle) {
                return { data: result.rows[0] || null, error: null };
            }
            
            return { data: result.rows, error: null };
            
        } catch (error) {
            console.error('Table query error:', error);
            return { data: null, error: error.message };
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è INSERT, UPDATE, DELETE
    async insert(data) {
        try {
            const columns = Object.keys(data).join(', ');
            const values = Object.values(data).map(v => `'${v}'`).join(', ');
            const sql = `INSERT INTO ${this.tableName} (${columns}) VALUES (${values}) RETURNING *`;
            
            const response = await fetch(`${this.apiUrl}/query`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ sql })
            });
            
            const result = await response.json();
            return { data: result.rows[0], error: null };
            
        } catch (error) {
            return { data: null, error: error.message };
        }
    }
    
    async update(data) {
        try {
            const setClause = Object.entries(data)
                .map(([key, value]) => `${key} = '${value}'`)
                .join(', ');
                
            let sql = `UPDATE ${this.tableName} SET ${setClause}`;
            
            if (this.whereConditions.length > 0) {
                sql += ` WHERE ${this.whereConditions.join(' AND ')}`;
            }
            
            sql += ' RETURNING *';
            
            const response = await fetch(`${this.apiUrl}/query`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ sql })
            });
            
            const result = await response.json();
            return { data: result.rows, error: null };
            
        } catch (error) {
            return { data: null, error: error.message };
        }
    }
    
    async delete() {
        try {
            let sql = `DELETE FROM ${this.tableName}`;
            
            if (this.whereConditions.length > 0) {
                sql += ` WHERE ${this.whereConditions.join(' AND ')}`;
            }
            
            const response = await fetch(`${this.apiUrl}/query`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ sql })
            });
            
            return { error: null };
            
        } catch (error) {
            return { error: error.message };
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
let timewebClient;

function initializeTimeweb() {
    try {
        timewebClient = new TimewebClient(TIMEWEB_CONFIG);
        
        // –ó–∞–º–µ–Ω—è–µ–º window.supabase –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        window.supabase = timewebClient;
        
        console.log('‚úÖ Timeweb client initialized successfully');
        console.log('üîó API URL:', TIMEWEB_CONFIG.apiUrl);
        
        return timewebClient;
        
    } catch (error) {
        console.error('‚ùå Error initializing Timeweb client:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testTimewebConnection() {
    try {
        const { data, error } = await timewebClient.query('SELECT 1 as test');
        
        if (error) {
            console.error('Timeweb connection error:', error);
            return false;
        }
        
        console.log('‚úÖ Timeweb connection successful');
        return true;
    } catch (err) {
        console.error('Timeweb connection failed:', err);
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Initializing Timeweb client...');
    
    const client = initializeTimeweb();
    if (client) {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(testTimewebConnection, 1000);
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.TIMEWEB_CONFIG = TIMEWEB_CONFIG;
window.initializeTimeweb = initializeTimeweb;
window.testTimewebConnection = testTimewebConnection;
