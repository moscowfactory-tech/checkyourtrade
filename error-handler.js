// –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è TradeAnalyzer
console.log('üõ†Ô∏è Loading error handler module...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
function showNotificationSafe(message, type = 'info', duration = 5000) {
    try {
        console.log(`${type.toUpperCase()}: ${message}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è showNotification
        if (typeof showNotification === 'function') {
            showNotification(message, type, duration);
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            createInlineNotification(message, type, duration);
        }
    } catch (error) {
        console.error('Error showing notification:', error);
        // –¢–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
        if (type === 'error') {
            console.error('CRITICAL ERROR:', message);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function createInlineNotification(message, type = 'info', duration = 5000) {
    try {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotifications = document.querySelectorAll('.inline-notification');
        existingNotifications.forEach(notification => notification.remove());
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `inline-notification notification-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: 14px;
            z-index: 10000;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
            cursor: pointer;
        `;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (type) {
            case 'error':
                notification.style.backgroundColor = '#dc3545';
                break;
            case 'warning':
                notification.style.backgroundColor = '#ffc107';
                notification.style.color = '#000';
                break;
            case 'success':
                notification.style.backgroundColor = '#28a745';
                break;
            default:
                notification.style.backgroundColor = '#17a2b8';
        }
        
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        notification.addEventListener('click', () => {
            notification.remove();
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if (duration > 0) {
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.opacity = '0';
                    setTimeout(() => notification.remove(), 300);
                }
            }, duration);
        }
        
    } catch (error) {
        console.error('Error creating inline notification:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async function safeLoadStrategies() {
    try {
        console.log('üîÑ Safe loading strategies...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
        if (!window.supabase) {
            console.warn('‚ö†Ô∏è Supabase client not available');
            showNotificationSafe('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º.', 'warning');
            return [];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        console.log('üîç Testing database connection...');
        const connectionTest = await Promise.race([
            window.supabase.from('strategies').select('count').limit(1),
            new Promise((_, reject) => setTimeout(() => reject(new Error('Connection timeout')), 10000))
        ]);
        
        if (connectionTest.error) {
            console.error('‚ùå Database connection error:', connectionTest.error);
            showNotificationSafe('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
            return [];
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        console.log('üì• Loading strategies from database...');
        const { data: strategies, error } = await Promise.race([
            window.supabase
                .from('strategies')
                .select('*')
                .order('created_at', { ascending: false }),
            new Promise((_, reject) => setTimeout(() => reject(new Error('Load timeout')), 15000))
        ]);
        
        if (error) {
            console.error('‚ùå Error loading strategies:', error);
            showNotificationSafe('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'error');
            return [];
        }
        
        if (!strategies || strategies.length === 0) {
            console.log('üìù No strategies found in database');
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–π –±–∞–∑—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            return [];
        }
        
        console.log(`‚úÖ Successfully loaded ${strategies.length} strategies`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if (strategies.length > 0) {
            showNotificationSafe(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${strategies.length} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π`, 'success', 3000);
        }
        return strategies;
        
    } catch (error) {
        console.error('‚ùå Exception in safeLoadStrategies:', error);
        
        if (error.message === 'Connection timeout') {
            showNotificationSafe('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        } else if (error.message === 'Load timeout') {
            showNotificationSafe('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π', 'error');
        } else {
            showNotificationSafe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π', 'error');
        }
        
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function safeSaveStrategy(strategyData) {
    try {
        console.log('üíæ Safe saving strategy:', strategyData.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
        if (!window.supabase) {
            console.error('‚ùå Supabase client not available');
            showNotificationSafe('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.', 'error');
            return null;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!strategyData.name || !strategyData.name.trim()) {
            showNotificationSafe('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
            return null;
        }
        
        if (!strategyData.fields || !Array.isArray(strategyData.fields) || strategyData.fields.length === 0) {
            showNotificationSafe('–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ', 'error');
            return null;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const { data: savedStrategy, error } = await Promise.race([
            window.supabase
                .from('strategies')
                .insert({
                    name: strategyData.name.trim(),
                    description: strategyData.description ? strategyData.description.trim() : '',
                    fields: strategyData.fields
                })
                .select()
                .single(),
            new Promise((_, reject) => setTimeout(() => reject(new Error('Save timeout')), 10000))
        ]);
        
        if (error) {
            console.error('‚ùå Error saving strategy:', error);
            showNotificationSafe('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ' + error.message, 'error');
            return null;
        }
        
        console.log('‚úÖ Strategy saved successfully:', savedStrategy);
        showNotificationSafe('–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
        return savedStrategy;
        
    } catch (error) {
        console.error('‚ùå Exception in safeSaveStrategy:', error);
        
        if (error.message === 'Save timeout') {
            showNotificationSafe('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', 'error');
        } else {
            showNotificationSafe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', 'error');
        }
        
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function safeInitializeApp() {
    try {
        console.log('üöÄ Safe initializing TradeAnalyzer...');
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
        let attempts = 0;
        const maxAttempts = 30; // 3 —Å–µ–∫—É–Ω–¥—ã
        
        while (!window.supabase && attempts < maxAttempts) {
            console.log(`‚è≥ Waiting for Supabase... (${attempts + 1}/${maxAttempts})`);
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        if (!window.supabase) {
            console.warn('‚ö†Ô∏è Supabase not available after waiting');
            showNotificationSafe('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.', 'warning', 4000);
        } else {
            console.log('‚úÖ Supabase client is available');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        const loadedStrategies = await safeLoadStrategies();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é strategies
        if (typeof strategies !== 'undefined') {
            strategies.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
            strategies.push(...loadedStrategies); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (typeof renderStrategies === 'function') {
            renderStrategies();
        }
        
        if (typeof updateStrategySelect === 'function') {
            updateStrategySelect();
        }
        
        console.log('‚úÖ App initialization completed');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error in safeInitializeApp:', error);
        showNotificationSafe('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.showNotificationSafe = showNotificationSafe;
window.safeLoadStrategies = safeLoadStrategies;
window.safeSaveStrategy = safeSaveStrategy;
window.safeInitializeApp = safeInitializeApp;

console.log('‚úÖ Error handler module loaded');
console.log('Available functions:');
console.log('- showNotificationSafe(message, type, duration)');
console.log('- await safeLoadStrategies()');
console.log('- await safeSaveStrategy(strategyData)');
console.log('- await safeInitializeApp()');
