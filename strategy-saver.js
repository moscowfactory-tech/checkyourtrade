// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
console.log('üíæ Loading strategy saver module...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveStrategyToDatabase(strategyData) {
    try {
        console.log('üíæ Saving strategy to database:', strategyData.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå Supabase client not available');
            return null;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        const { data: savedStrategy, error } = await window.supabase
            .from('strategies')
            .insert({
                name: strategyData.name,
                description: strategyData.description,
                fields: strategyData.fields
            })
            .select()
            .single();
            
        if (error) {
            console.error('‚ùå Error saving strategy:', error);
            return null;
        }
        
        console.log('‚úÖ Strategy saved successfully:', savedStrategy);
        return savedStrategy;
        
    } catch (error) {
        console.error('‚ùå Exception saving strategy:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function loadStrategiesFromDatabase() {
    try {
        console.log('üì• Loading strategies from database...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå Supabase client not available');
            return [];
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        const { data: strategiesData, error } = await window.supabase
            .from('strategies')
            .select('*')
            .order('created_at', { ascending: false });
            
        if (error) {
            console.error('‚ùå Error loading strategies:', error);
            return [];
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const formattedStrategies = strategiesData
            .filter(strategy => strategy.fields && Array.isArray(strategy.fields))
            .map(strategy => ({
                id: strategy.id,
                name: strategy.name,
                description: strategy.description,
                fields: strategy.fields
            }));
        
        console.log(`‚úÖ Loaded ${formattedStrategies.length} strategies from database`);
        return formattedStrategies;
        
    } catch (error) {
        console.error('‚ùå Exception loading strategies:', error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkStrategyExists(strategyId) {
    try {
        if (typeof window.supabase === 'undefined') {
            return false;
        }
        
        const { data, error } = await window.supabase
            .from('strategies')
            .select('id')
            .eq('id', strategyId)
            .single();
            
        return !error && data;
        
    } catch (error) {
        console.error('‚ùå Error checking strategy existence:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function deleteStrategyFromDatabase(strategyId) {
    try {
        console.log('üóëÔ∏è Deleting strategy from database:', strategyId);
        
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå Supabase client not available');
            return false;
        }
        
        const { error } = await window.supabase
            .from('strategies')
            .delete()
            .eq('id', strategyId);
            
        if (error) {
            console.error('‚ùå Error deleting strategy:', error);
            return false;
        }
        
        console.log('‚úÖ Strategy deleted successfully');
        return true;
        
    } catch (error) {
        console.error('‚ùå Exception deleting strategy:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function syncStrategiesWithDatabase() {
    try {
        console.log('üîÑ Syncing strategies with database...');
        
        const dbStrategies = await loadStrategiesFromDatabase();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é strategies
        if (typeof strategies !== 'undefined') {
            strategies.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
            strategies.push(...dbStrategies); // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            
            console.log(`‚úÖ Synced ${strategies.length} strategies`);
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (typeof renderStrategies === 'function') {
                renderStrategies();
            }
            if (typeof updateStrategySelect === 'function') {
                updateStrategySelect();
            }
        }
        
        return dbStrategies;
        
    } catch (error) {
        console.error('‚ùå Error syncing strategies:', error);
        return [];
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.saveStrategyToDatabase = saveStrategyToDatabase;
window.loadStrategiesFromDatabase = loadStrategiesFromDatabase;
window.checkStrategyExists = checkStrategyExists;
window.deleteStrategyFromDatabase = deleteStrategyFromDatabase;
window.syncStrategiesWithDatabase = syncStrategiesWithDatabase;

console.log('‚úÖ Strategy saver module loaded');
console.log('Available functions:');
console.log('- await saveStrategyToDatabase(strategy)');
console.log('- await loadStrategiesFromDatabase()');
console.log('- await syncStrategiesWithDatabase()');
console.log('- await checkStrategyExists(id)');
console.log('- await deleteStrategyFromDatabase(id)');
