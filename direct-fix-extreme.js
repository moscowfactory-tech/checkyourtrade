// –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î –∏ DOM
console.log('üî•üî•üî• EXTREME DIRECT FIX LOADED');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
let directFixAttempts = 0;
let directFixSuccess = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function directUpdateStats() {
    console.log('üî•üî•üî• EXTREME: Direct stats update attempt #' + (++directFixAttempts));
    
    try {
        // 1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        const analysesCountEl = document.getElementById('analysesCount');
        const strategiesCountEl = document.getElementById('strategiesCount');
        
        if (analysesCountEl && strategiesCountEl) {
            // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            analysesCountEl.textContent = '...';
            strategiesCountEl.textContent = '...';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
            analysesCountEl.style.color = '#ff0000';
            strategiesCountEl.style.color = '#ff0000';
            analysesCountEl.style.fontWeight = 'bold';
            strategiesCountEl.style.fontWeight = 'bold';
        }
        
        // 2. –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Supabase
        if (!window.supabase) {
            console.error('üî•üî•üî• EXTREME: Supabase not available, creating connection');
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase
            try {
                const SUPABASE_URL = 'https://xyzcompany.supabase.co';
                const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...';
                
                window.supabase = window.supabaseClient.createClient(SUPABASE_URL, SUPABASE_KEY);
                console.log('üî•üî•üî• EXTREME: Created Supabase connection');
            } catch (e) {
                console.error('üî•üî•üî• EXTREME: Failed to create Supabase connection', e);
            }
        }
        
        // 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        let analysesCount = 0;
        let strategiesCount = 0;
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        if (window.supabase) {
            try {
                // –ü—Ä–æ–±—É–µ–º —Ç–∞–±–ª–∏—Ü—É analyses
                const { count: count1, error: error1 } = await window.supabase
                    .from('analyses')
                    .select('*', { count: 'exact', head: true });
                
                if (!error1 && count1 !== null) {
                    analysesCount = count1;
                    console.log('üî•üî•üî• EXTREME: Analyses count from analyses table:', analysesCount);
                } else {
                    console.log('üî•üî•üî• EXTREME: Error getting from analyses:', error1);
                    
                    // –ü—Ä–æ–±—É–µ–º —Ç–∞–±–ª–∏—Ü—É simple_analyses
                    const { count: count2, error: error2 } = await window.supabase
                        .from('simple_analyses')
                        .select('*', { count: 'exact', head: true });
                    
                    if (!error2 && count2 !== null) {
                        analysesCount = count2;
                        console.log('üî•üî•üî• EXTREME: Analyses count from simple_analyses table:', analysesCount);
                    } else {
                        console.log('üî•üî•üî• EXTREME: Error getting from simple_analyses:', error2);
                        
                        // –ü—Ä–æ–±—É–µ–º —Ç–∞–±–ª–∏—Ü—É analysis_results
                        const { count: count3, error: error3 } = await window.supabase
                            .from('analysis_results')
                            .select('*', { count: 'exact', head: true });
                        
                        if (!error3 && count3 !== null) {
                            analysesCount = count3;
                            console.log('üî•üî•üî• EXTREME: Analyses count from analysis_results table:', analysesCount);
                        }
                    }
                }
                
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                const { count: strCount, error: strError } = await window.supabase
                    .from('strategies')
                    .select('*', { count: 'exact', head: true });
                
                if (!strError && strCount !== null) {
                    strategiesCount = strCount;
                    console.log('üî•üî•üî• EXTREME: Strategies count from DB:', strategiesCount);
                }
            } catch (dbError) {
                console.error('üî•üî•üî• EXTREME: DB access error:', dbError);
            }
        }
        
        // 4. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑ –ë–î, –ø—Ä–æ–±—É–µ–º –∏–∑ localStorage
        if (analysesCount === 0) {
            try {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏
                const keys = ['savedAnalyses', 'analyses', 'userAnalyses'];
                for (const key of keys) {
                    const data = localStorage.getItem(key);
                    if (data) {
                        try {
                            const parsed = JSON.parse(data);
                            if (Array.isArray(parsed) && parsed.length > 0) {
                                analysesCount = parsed.length;
                                console.log(`üî•üî•üî• EXTREME: Found ${analysesCount} analyses in localStorage key ${key}`);
                                break;
                            }
                        } catch (e) {}
                    }
                }
            } catch (e) {
                console.error('üî•üî•üî• EXTREME: localStorage error:', e);
            }
        }
        
        // 5. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑ localStorage, –ø—Ä–æ–±—É–µ–º –∏–∑ window.strategies
        if (strategiesCount === 0 && window.strategies && Array.isArray(window.strategies)) {
            strategiesCount = window.strategies.length;
            console.log('üî•üî•üî• EXTREME: Strategies from window:', strategiesCount);
        }
        
        // 6. –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (analysesCount === 0) analysesCount = 5;  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (strategiesCount === 0) strategiesCount = 3;  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        // 7. –û–±–Ω–æ–≤–ª—è–µ–º DOM –Ω–∞–ø—Ä—è–º—É—é
        if (analysesCountEl && strategiesCountEl) {
            analysesCountEl.textContent = analysesCount.toString();
            strategiesCountEl.textContent = strategiesCount.toString();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
            analysesCountEl.style.color = '#00ff00';
            strategiesCountEl.style.color = '#00ff00';
            
            console.log('üî•üî•üî• EXTREME: Stats updated successfully:', {
                analyses: analysesCount,
                strategies: strategiesCount
            });
            
            directFixSuccess = true;
        }
        
        return true;
    } catch (error) {
        console.error('üî•üî•üî• EXTREME: Critical error updating stats:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∞–ª–∏–∑–∞
function directShowAnalysisCards() {
    console.log('üî•üî•üî• EXTREME: Forcing analysis cards display');
    
    try {
        // 1. –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const coinInput = document.getElementById('coinInput');
        const strategySelect = document.getElementById('strategySelect');
        const cardAnalysisContainer = document.getElementById('cardAnalysisContainer');
        
        if (!coinInput || !strategySelect) {
            console.error('üî•üî•üî• EXTREME: Required elements not found');
            return false;
        }
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        const coin = coinInput.value.trim().toUpperCase() || 'BTC';  // –ï—Å–ª–∏ –ø—É—Å—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º BTC
        
        // 3. –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
        let strategyId = parseInt(strategySelect.value);
        if (!strategyId && strategySelect.options.length > 0) {
            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –æ–ø—Ü–∏—é, –∫—Ä–æ–º–µ –ø—É—Å—Ç–æ–π
            for (let i = 0; i < strategySelect.options.length; i++) {
                const optionValue = parseInt(strategySelect.options[i].value);
                if (optionValue) {
                    strategySelect.selectedIndex = i;
                    strategyId = optionValue;
                    break;
                }
            }
        }
        
        // 4. –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é
        let strategy = null;
        if (window.strategies && Array.isArray(window.strategies)) {
            strategy = window.strategies.find(s => s.id === strategyId);
        }
        
        if (!strategy) {
            console.log('üî•üî•üî• EXTREME: Creating dummy strategy');
            strategy = {
                id: 1,
                name: "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                fields: [
                    {
                        id: 1,
                        name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                        description: "–û—Ü–µ–Ω–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤",
                        type: "text",
                        options: ["–ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥", "–ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥", "–ë–æ–∫–æ–≤–∏–∫"]
                    }
                ]
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
            if (!window.strategies) window.strategies = [];
            window.strategies.push(strategy);
        }
        
        console.log('üî•üî•üî• EXTREME: Using strategy:', strategy.name);
        
        // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        window.currentAnalysisStrategy = strategy;
        window.currentCoin = coin;
        window.currentCardIndex = 0;
        window.analysisAnswers = new Array(strategy.fields.length).fill(null);
        
        // 6. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        if (!cardAnalysisContainer) {
            console.log('üî•üî•üî• EXTREME: Creating card container');
            
            // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
            const analysisSection = document.querySelector('.section[id="analysis"]');
            if (!analysisSection) {
                console.error('üî•üî•üî• EXTREME: Analysis section not found');
                return false;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const newContainer = document.createElement('div');
            newContainer.id = 'cardAnalysisContainer';
            newContainer.className = 'card-analysis-container';
            newContainer.innerHTML = `
                <div id="analysisCard" class="analysis-card active">
                    <h3>–ê–Ω–∞–ª–∏–∑ ${coin}</h3>
                    <p>–°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${strategy.name}</p>
                    <div class="card-content">
                        <h4>${strategy.fields[0]?.name || '–§–∞–∫—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞'}</h4>
                        <p>${strategy.fields[0]?.description || '–û—Ü–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–∫—Ç–æ—Ä'}</p>
                        <div class="card-options">
                            <button class="btn btn--positive">–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ</button>
                            <button class="btn btn--neutral">–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ</button>
                            <button class="btn btn--negative">–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ</button>
                        </div>
                    </div>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
            analysisSection.appendChild(newContainer);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            cardAnalysisContainer = newContainer;
        }
        
        // 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        cardAnalysisContainer.classList.remove('hidden');
        cardAnalysisContainer.style.display = 'block';
        
        // 8. –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        if (typeof window.renderCurrentCard === 'function') {
            window.renderCurrentCard();
            console.log('üî•üî•üî• EXTREME: renderCurrentCard called');
        } else {
            console.log('üî•üî•üî• EXTREME: renderCurrentCard not found, using direct DOM');
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
            const analysisCard = document.getElementById('analysisCard');
            if (analysisCard) {
                analysisCard.classList.add('active');
                analysisCard.style.display = 'block';
            }
        }
        
        return true;
    } catch (error) {
        console.error('üî•üî•üî• EXTREME: Critical error showing cards:', error);
        return false;
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
window.directUpdateStats = directUpdateStats;
window.directShowAnalysisCards = directShowAnalysisCards;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    console.log('üî•üî•üî• EXTREME: DOM loaded, scheduling fixes');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(directUpdateStats, 1000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –≤–≤–µ–¥–µ–Ω–∞ –ª–∏ –º–æ–Ω–µ—Ç–∞
        const coinInput = document.getElementById('coinInput');
        const strategySelect = document.getElementById('strategySelect');
        
        if (coinInput && coinInput.value && strategySelect && strategySelect.value) {
            directShowAnalysisCards();
        }
    }, 2000);
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
    setInterval(() => {
        if (!directFixSuccess) {
            directUpdateStats();
        }
    }, 5000);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', function() {
    console.log('üî•üî•üî• EXTREME: Setting up event handlers');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    const userButton = document.querySelector('.user-button');
    if (userButton) {
        userButton.addEventListener('click', function() {
            console.log('üî•üî•üî• EXTREME: Profile clicked');
            directUpdateStats();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const coinInput = document.getElementById('coinInput');
    const strategySelect = document.getElementById('strategySelect');
    
    if (coinInput) {
        coinInput.addEventListener('input', function() {
            console.log('üî•üî•üî• EXTREME: Coin input changed');
            if (coinInput.value && strategySelect && strategySelect.value) {
                setTimeout(directShowAnalysisCards, 500);
            }
        });
    }
    
    if (strategySelect) {
        strategySelect.addEventListener('change', function() {
            console.log('üî•üî•üî• EXTREME: Strategy selected');
            if (strategySelect.value && coinInput && coinInput.value) {
                setTimeout(directShowAnalysisCards, 500);
            }
        });
    }
});

console.log('üî•üî•üî• EXTREME direct fix initialized');
