// –ú–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase
console.log('üîå Loading connection check module...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase
async function checkSupabaseConnection() {
    try {
        console.log('üîç Checking Supabase connection...');
        
        if (!window.supabase) {
            console.error('‚ùå Supabase client not available');
            return { status: 'error', message: 'Supabase client not available' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        const { data, error } = await window.supabase
            .from('strategies')
            .select('count')
            .limit(1);
            
        if (error) {
            console.error('‚ùå Database connection error:', error);
            return { 
                status: 'error', 
                message: error.message || 'Database connection error',
                error: error
            };
        }
        
        console.log('‚úÖ Supabase connection successful');
        return { status: 'success', message: 'Connection successful' };
        
    } catch (error) {
        console.error('‚ùå Exception checking connection:', error);
        return { 
            status: 'error', 
            message: error.message || 'Exception checking connection',
            error: error
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü
async function checkTables() {
    try {
        console.log('üîç Checking database tables...');
        
        if (!window.supabase) {
            console.error('‚ùå Supabase client not available');
            return { status: 'error', message: 'Supabase client not available' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        const tables = ['strategies', 'users', 'analysis_results'];
        const results = {};
        
        for (const table of tables) {
            try {
                const { data, error } = await window.supabase
                    .from(table)
                    .select('count')
                    .limit(1);
                    
                results[table] = {
                    status: error ? 'error' : 'success',
                    message: error ? error.message : 'Table accessible',
                    error: error
                };
                
            } catch (err) {
                results[table] = {
                    status: 'error',
                    message: err.message || `Exception checking table ${table}`,
                    error: err
                };
            }
        }
        
        console.log('üìä Table check results:', results);
        return { 
            status: 'completed', 
            results: results
        };
        
    } catch (error) {
        console.error('‚ùå Exception checking tables:', error);
        return { 
            status: 'error', 
            message: error.message || 'Exception checking tables',
            error: error
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã strategies
async function checkStrategiesTable() {
    try {
        console.log('üîç Checking strategies table structure...');
        
        if (!window.supabase) {
            console.error('‚ùå Supabase client not available');
            return { status: 'error', message: 'Supabase client not available' };
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã strategies
        const { data, error } = await window.supabase
            .from('strategies')
            .select('id, name, description, fields, created_at')
            .limit(1);
            
        if (error) {
            console.error('‚ùå Error checking strategies table:', error);
            return { 
                status: 'error', 
                message: error.message || 'Error checking strategies table',
                error: error
            };
        }
        
        console.log('‚úÖ Strategies table structure is valid');
        return { 
            status: 'success', 
            message: 'Strategies table structure is valid',
            sample: data
        };
        
    } catch (error) {
        console.error('‚ùå Exception checking strategies table:', error);
        return { 
            status: 'error', 
            message: error.message || 'Exception checking strategies table',
            error: error
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
async function fixConnectionIssues() {
    try {
        console.log('üîß Attempting to fix connection issues...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const connectionStatus = await checkSupabaseConnection();
        if (connectionStatus.status === 'success') {
            console.log('‚úÖ Connection is already working');
            return { status: 'success', message: 'Connection is already working' };
        }
        
        // 2. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase
        if (typeof initializeSupabase === 'function') {
            console.log('üîÑ Reinitializing Supabase client...');
            const client = initializeSupabase();
            if (client) {
                window.supabase = client;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
                const retryStatus = await checkSupabaseConnection();
                if (retryStatus.status === 'success') {
                    console.log('‚úÖ Connection fixed successfully');
                    return { status: 'success', message: 'Connection fixed successfully' };
                }
            }
        }
        
        console.log('‚ö†Ô∏è Could not fix connection automatically');
        return { 
            status: 'error', 
            message: 'Could not fix connection automatically. Try reloading the page.'
        };
        
    } catch (error) {
        console.error('‚ùå Exception fixing connection:', error);
        return { 
            status: 'error', 
            message: error.message || 'Exception fixing connection',
            error: error
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.checkSupabaseConnection = checkSupabaseConnection;
window.checkTables = checkTables;
window.checkStrategiesTable = checkStrategiesTable;
window.fixConnectionIssues = fixConnectionIssues;

console.log('‚úÖ Connection check module loaded');
console.log('Available functions:');
console.log('- await checkSupabaseConnection()');
console.log('- await checkTables()');
console.log('- await checkStrategiesTable()');
console.log('- await fixConnectionIssues()');
