// ========================================
// STRATEGY MANAGER v1.0
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
// ========================================

class StrategyManager {
    constructor(supabaseClient, userManager) {
        this.supabase = supabaseClient;
        this.userManager = userManager;
        this.strategies = [];
        this.isInitialized = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    async initialize() {
        console.log('üéØ STRATEGY MANAGER: Initializing...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
            if (!await this.validateDatabase()) {
                throw new Error('Database validation failed');
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            await this.loadStrategies();
            
            this.isInitialized = true;
            console.log('‚úÖ STRATEGY MANAGER: Initialized successfully');
            return true;
        } catch (error) {
            console.error('‚ùå STRATEGY MANAGER: Initialization failed:', error);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    async validateDatabase() {
        try {
            const { data, error } = await this.supabase
                .from('strategies')
                .select('count')
                .limit(1);
            
            return !error;
        } catch (error) {
            console.error('Database validation error:', error);
            return false;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    async loadStrategies() {
        try {
            const currentUser = await this.userManager.getCurrentUser();
            if (!currentUser) {
                console.log('No current user, loading public strategies');
                return await this.loadPublicStrategies();
            }

            console.log(`üîÑ Loading strategies for user: ${currentUser.telegram_id}`);
            
            const { data: strategies, error } = await this.supabase
                .from('strategies')
                .select('*')
                .eq('user_id', currentUser.id)
                .order('created_at', { ascending: false });

            if (error) {
                throw error;
            }

            this.strategies = strategies || [];
            console.log(`‚úÖ Loaded ${this.strategies.length} strategies`);
            
            return this.strategies;
        } catch (error) {
            console.error('Error loading strategies:', error);
            throw error;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    async loadPublicStrategies() {
        try {
            const { data: strategies, error } = await this.supabase
                .from('strategies')
                .select('*')
                .eq('is_public', true)
                .order('created_at', { ascending: false });

            if (error) {
                throw error;
            }

            this.strategies = strategies || [];
            console.log(`‚úÖ Loaded ${this.strategies.length} public strategies`);
            
            return this.strategies;
        } catch (error) {
            console.error('Error loading public strategies:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async createStrategy(strategyData) {
        try {
            console.log('üÜï Creating new strategy:', strategyData.name);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUser = await this.userManager.getCurrentUser();
            if (!currentUser) {
                throw new Error('User not authenticated');
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            this.validateStrategyData(strategyData);

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –ë–î
            const { data: newStrategy, error } = await this.supabase
                .from('strategies')
                .insert({
                    name: strategyData.name,
                    description: strategyData.description || '',
                    fields: strategyData.fields || [],
                    user_id: currentUser.id,
                    is_public: strategyData.isPublic || false
                })
                .select()
                .single();

            if (error) {
                throw error;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
            this.strategies.unshift(newStrategy);
            
            console.log('‚úÖ Strategy created successfully:', newStrategy.id);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            this.notifyStrategyChange('created', newStrategy);
            
            return newStrategy;
        } catch (error) {
            console.error('Error creating strategy:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async updateStrategy(strategyId, updateData) {
        try {
            console.log('üìù Updating strategy:', strategyId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const strategy = await this.getStrategyById(strategyId);
            if (!strategy) {
                throw new Error('Strategy not found');
            }

            const currentUser = await this.userManager.getCurrentUser();
            if (!currentUser || strategy.user_id !== currentUser.id) {
                throw new Error('Access denied');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            const { data: updatedStrategy, error } = await this.supabase
                .from('strategies')
                .update(updateData)
                .eq('id', strategyId)
                .eq('user_id', currentUser.id)
                .select()
                .single();

            if (error) {
                throw error;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
            const index = this.strategies.findIndex(s => s.id === strategyId);
            if (index !== -1) {
                this.strategies[index] = updatedStrategy;
            }

            console.log('‚úÖ Strategy updated successfully');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            this.notifyStrategyChange('updated', updatedStrategy);
            
            return updatedStrategy;
        } catch (error) {
            console.error('Error updating strategy:', error);
            throw error;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    async deleteStrategy(strategyId) {
        try {
            console.log('üóëÔ∏è Deleting strategy:', strategyId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const currentUser = await this.userManager.getCurrentUser();
            if (!currentUser) {
                throw new Error('User not authenticated');
            }

            // –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            const { error } = await this.supabase
                .from('strategies')
                .delete()
                .eq('id', strategyId)
                .eq('user_id', currentUser.id);

            if (error) {
                throw error;
            }

            // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            this.strategies = this.strategies.filter(s => s.id !== strategyId);

            console.log('‚úÖ Strategy deleted successfully');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            this.notifyStrategyChange('deleted', { id: strategyId });
            
            return true;
        } catch (error) {
            console.error('Error deleting strategy:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ ID
    async getStrategyById(strategyId) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        let strategy = this.strategies.find(s => s.id === strategyId);
        
        if (!strategy) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
            try {
                const { data, error } = await this.supabase
                    .from('strategies')
                    .select('*')
                    .eq('id', strategyId)
                    .single();

                if (!error && data) {
                    strategy = data;
                }
            } catch (error) {
                console.error('Error fetching strategy:', error);
            }
        }

        return strategy;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    validateStrategyData(strategyData) {
        if (!strategyData.name || !strategyData.name.trim()) {
            throw new Error('Strategy name is required');
        }

        if (strategyData.name.length > 255) {
            throw new Error('Strategy name is too long');
        }

        if (strategyData.fields && !Array.isArray(strategyData.fields)) {
            throw new Error('Strategy fields must be an array');
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    notifyStrategyChange(action, strategy) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const event = new CustomEvent('strategyChanged', {
            detail: { action, strategy, strategies: this.strategies }
        });
        
        if (typeof window !== 'undefined') {
            window.dispatchEvent(event);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    getStrategies() {
        return [...this.strategies];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    getStrategiesCount() {
        return this.strategies.length;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    checkInitialization() {
        if (!this.isInitialized) {
            throw new Error('StrategyManager not initialized. Call initialize() first.');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof window !== 'undefined') {
    window.StrategyManager = StrategyManager;
}

console.log('üéØ Strategy Manager loaded');
