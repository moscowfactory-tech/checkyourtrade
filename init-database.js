// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
console.log('üóÑÔ∏è Initializing database...');

// –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
const sampleStrategies = [
    {
        name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è",
        description: "–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã",
        is_public: true,
        fields: [
            {
                name: "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞",
                description: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞",
                sort_order: 1,
                inputs: [
                    {
                        type: "select",
                        label: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞",
                        required: true,
                        options: ["–í–æ—Å—Ö–æ–¥—è—â–∏–π", "–ù–∏—Å—Ö–æ–¥—è—â–∏–π", "–ë–æ–∫–æ–≤–æ–π"],
                        sort_order: 1
                    },
                    {
                        type: "select",
                        label: "–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞",
                        required: true,
                        options: ["–°–∏–ª—å–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–°–ª–∞–±—ã–π"],
                        sort_order: 2
                    }
                ]
            },
            {
                name: "–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                description: "–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π",
                sort_order: 2,
                inputs: [
                    {
                        type: "select",
                        label: "–ë–ª–∏–∑–æ—Å—Ç—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
                        required: true,
                        options: ["–û—á–µ–Ω—å –±–ª–∏–∑–∫–æ", "–ë–ª–∏–∑–∫–æ", "–î–∞–ª–µ–∫–æ"],
                        sort_order: 1
                    },
                    {
                        type: "select",
                        label: "–ë–ª–∏–∑–æ—Å—Ç—å –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é",
                        required: true,
                        options: ["–û—á–µ–Ω—å –±–ª–∏–∑–∫–æ", "–ë–ª–∏–∑–∫–æ", "–î–∞–ª–µ–∫–æ"],
                        sort_order: 2
                    }
                ]
            }
        ]
    },
    {
        name: "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        description: "–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
        is_public: true,
        fields: [
            {
                name: "–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π",
                description: "–û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—ã–Ω–æ–∫",
                sort_order: 1,
                inputs: [
                    {
                        type: "select",
                        label: "–¢–∏–ø –Ω–æ–≤–æ—Å—Ç–µ–π",
                        required: true,
                        options: ["–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"],
                        sort_order: 1
                    },
                    {
                        type: "select",
                        label: "–í–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π",
                        required: true,
                        options: ["–í—ã—Å–æ–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ù–∏–∑–∫–∞—è"],
                        sort_order: 2
                    }
                ]
            },
            {
                name: "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
                description: "–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                sort_order: 2,
                inputs: [
                    {
                        type: "select",
                        label: "–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏",
                        required: true,
                        options: ["–†–∞—Å—Ç—É—â–∞—è", "–°—Ç–∞–±–∏–ª—å–Ω–∞—è", "–ü–∞–¥–∞—é—â–∞—è"],
                        sort_order: 1
                    }
                ]
            }
        ]
    },
    {
        name: "–ü—Ä–æ–±–æ–π",
        description: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –ø—Ä–æ–±–æ—è—Ö —É—Ä–æ–≤–Ω–µ–π",
        is_public: true,
        fields: [
            {
                name: "–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ—è",
                description: "–û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–æ—è",
                sort_order: 1,
                inputs: [
                    {
                        type: "select",
                        label: "–¢–∏–ø —É—Ä–æ–≤–Ω—è",
                        required: true,
                        options: ["–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ", "–¢—Ä–µ–Ω–¥–æ–≤–∞—è –ª–∏–Ω–∏—è"],
                        sort_order: 1
                    },
                    {
                        type: "select",
                        label: "–°–∏–ª–∞ –ø—Ä–æ–±–æ—è",
                        required: true,
                        options: ["–°–∏–ª—å–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–°–ª–∞–±—ã–π"],
                        sort_order: 2
                    }
                ]
            },
            {
                name: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è",
                description: "–ê–Ω–∞–ª–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
                sort_order: 2,
                inputs: [
                    {
                        type: "select",
                        label: "–û–±—ä–µ–º –ø—Ä–∏ –ø—Ä–æ–±–æ–µ",
                        required: true,
                        options: ["–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"],
                        sort_order: 1
                    },
                    {
                        type: "select",
                        label: "–†–µ—Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è",
                        required: true,
                        options: ["–£—Å–ø–µ—à–Ω—ã–π", "–ù–µ—É—Å–ø–µ—à–Ω—ã–π", "–ù–µ –±—ã–ª–æ"],
                        sort_order: 2
                    }
                ]
            }
        ]
    }
];

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
    try {
        console.log('üöÄ Starting database initialization...');
        
        if (typeof supabase === 'undefined') {
            console.error('‚ùå Supabase client not available');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { data: testData, error: testError } = await supabase
            .from('strategies')
            .select('count')
            .limit(1);
            
        if (testError) {
            console.error('‚ùå Database connection failed:', testError);
            return false;
        }
        
        console.log('‚úÖ Database connection successful');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –±–∞–∑–µ
        const { data: existingStrategies, error: checkError } = await supabase
            .from('strategies')
            .select('id');
            
        if (checkError) {
            console.error('‚ùå Error checking existing strategies:', checkError);
            return false;
        }
        
        if (existingStrategies && existingStrategies.length > 0) {
            console.log('‚ÑπÔ∏è Sample strategies already exist in database');
            return true;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        console.log('üìù Adding sample strategies to database...');
        
        for (const strategy of sampleStrategies) {
            const { data, error } = await supabase
                .from('strategies')
                .insert({
                    name: strategy.name,
                    description: strategy.description,
                    fields: strategy.fields // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è –≤ JSONB —Ñ–æ—Ä–º–∞—Ç–µ
                })
                .select()
                .single();
                
            if (error) {
                console.error('‚ùå Error adding strategy:', error);
            } else {
                console.log(`‚úÖ Added strategy: ${strategy.name}`);
            }
        }
        
        console.log('‚úÖ Database initialization completed successfully');
        return true;
        
    } catch (error) {
        console.error('‚ùå Database initialization failed:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function addStrategyToDatabase(strategyData) {
    try {
        console.log(`üìã Adding strategy: ${strategyData.name}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        const { data: strategy, error: strategyError } = await supabase
            .from('strategies')
            .insert({
                name: strategyData.name,
                description: strategyData.description,
                is_public: strategyData.is_public,
                user_id: null // –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            })
            .select()
            .single();
            
        if (strategyError) {
            console.error('‚ùå Error adding strategy:', strategyError);
            return;
        }
        
        console.log(`‚úÖ Strategy added with ID: ${strategy.id}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for (const field of strategyData.fields) {
            const { data: strategyField, error: fieldError } = await supabase
                .from('strategy_fields')
                .insert({
                    strategy_id: strategy.id,
                    name: field.name,
                    description: field.description,
                    sort_order: field.sort_order
                })
                .select()
                .single();
                
            if (fieldError) {
                console.error('‚ùå Error adding field:', fieldError);
                continue;
            }
            
            console.log(`  ‚úÖ Field added: ${field.name}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—è
            for (const input of field.inputs) {
                const { error: inputError } = await supabase
                    .from('field_inputs')
                    .insert({
                        field_id: strategyField.id,
                        type: input.type,
                        label: input.label,
                        required: input.required,
                        options: input.options,
                        sort_order: input.sort_order
                    });
                    
                if (inputError) {
                    console.error('‚ùå Error adding input:', inputError);
                    continue;
                }
                
                console.log(`    ‚úÖ Input added: ${input.label}`);
            }
        }
    } catch (error) {
        console.error('‚ùå Error in addStrategyToDatabase:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.initializeDatabase = initializeDatabase;
window.sampleStrategies = sampleStrategies;

console.log('‚úÖ Database initialization module loaded');
