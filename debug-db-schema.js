// –û–¢–õ–ê–î–û–ß–ù–´–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–•–ï–ú–´ –ë–î
// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

async function debugDatabaseSchema() {
    console.log('üîç DEBUGGING DATABASE SCHEMA...');
    
    if (!window.supabase) {
        console.error('‚ùå Supabase not initialized');
        return;
    }
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É strategies
        console.log('\nüìã CHECKING STRATEGIES TABLE:');
        const { data: strategies, error: strategiesError } = await window.supabase
            .from('strategies')
            .select('*')
            .limit(1);
            
        if (strategiesError) {
            console.error('‚ùå Strategies table error:', strategiesError);
        } else {
            console.log('‚úÖ Strategies table exists');
            if (strategies && strategies.length > 0) {
                console.log('üìä Sample strategy structure:', Object.keys(strategies[0]));
                console.log('üìä Sample strategy data:', strategies[0]);
            } else {
                console.log('üìä Strategies table is empty');
            }
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
        console.log('\nüë• CHECKING USERS TABLE:');
        const { data: users, error: usersError } = await window.supabase
            .from('users')
            .select('*')
            .limit(1);
            
        if (usersError) {
            console.error('‚ùå Users table error:', usersError);
        } else {
            console.log('‚úÖ Users table exists');
            if (users && users.length > 0) {
                console.log('üìä Sample user structure:', Object.keys(users[0]));
                console.log('üìä Sample user data:', users[0]);
            } else {
                console.log('üìä Users table is empty');
            }
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É analyses/analysis_results
        console.log('\nüìà CHECKING ANALYSES TABLE:');
        const { data: analyses, error: analysesError } = await window.supabase
            .from('analyses')
            .select('*')
            .limit(1);
            
        if (analysesError) {
            console.log('‚ö†Ô∏è "analyses" table not found, trying "analysis_results"...');
            
            const { data: analysisResults, error: analysisResultsError } = await window.supabase
                .from('analysis_results')
                .select('*')
                .limit(1);
                
            if (analysisResultsError) {
                console.error('‚ùå Neither "analyses" nor "analysis_results" table found:', analysisResultsError);
            } else {
                console.log('‚úÖ analysis_results table exists');
                if (analysisResults && analysisResults.length > 0) {
                    console.log('üìä Sample analysis structure:', Object.keys(analysisResults[0]));
                } else {
                    console.log('üìä analysis_results table is empty');
                }
            }
        } else {
            console.log('‚úÖ analyses table exists');
            if (analyses && analyses.length > 0) {
                console.log('üìä Sample analysis structure:', Object.keys(analyses[0]));
            } else {
                console.log('üìä analyses table is empty');
            }
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        console.log('\nüë§ CHECKING CURRENT USER:');
        const telegramUserId = window.getTelegramUserId ? window.getTelegramUserId() : null;
        console.log('üì± Telegram User ID:', telegramUserId);
        
        if (telegramUserId) {
            const { data: currentUser } = await window.supabase
                .from('users')
                .select('*')
                .eq('telegram_id', telegramUserId)
                .single();
                
            if (currentUser) {
                console.log('‚úÖ Current user found in DB:', currentUser);
            } else {
                console.log('‚ö†Ô∏è Current user NOT found in DB');
            }
        }
        
        console.log('\nüèÅ DATABASE SCHEMA DEBUG COMPLETE');
        
    } catch (error) {
        console.error('‚ùå Debug error:', error);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
setTimeout(() => {
    debugDatabaseSchema();
}, 3000);

// –¢–∞–∫–∂–µ –¥–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
window.debugDatabaseSchema = debugDatabaseSchema;
