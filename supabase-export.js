// –°–ö–†–ò–ü–¢ –≠–ö–°–ü–û–†–¢–ê –î–ê–ù–ù–´–• –ò–ó SUPABASE
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

async function exportSupabaseData() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...');
    
    if (!window.supabase) {
        console.error('‚ùå Supabase client –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const exportData = {
        users: [],
        strategies: [],
        analyses: [],
        exportDate: new Date().toISOString(),
        version: '1.0'
    };
    
    try {
        // –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const { data: users, error: usersError } = await window.supabase
            .from('users')
            .select('*')
            .order('created_at', { ascending: true });
            
        if (usersError) throw usersError;
        exportData.users = users || [];
        console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${exportData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        // –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...');
        const { data: strategies, error: strategiesError } = await window.supabase
            .from('strategies')
            .select('*')
            .order('created_at', { ascending: true });
            
        if (strategiesError) throw strategiesError;
        exportData.strategies = strategies || [];
        console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${exportData.strategies.length} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π`);
        
        // –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ (–∏–∑ analysis_results)
        console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–æ–≤...');
        const { data: analyses, error: analysesError } = await window.supabase
            .from('analysis_results')
            .select('*')
            .order('created_at', { ascending: true });
            
        if (analysesError) throw analysesError;
        exportData.analyses = analyses || [];
        console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${exportData.analyses.length} –∞–Ω–∞–ª–∏–∑–æ–≤`);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        const dataStr = JSON.stringify(exportData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `supabase-export-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        console.log('üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', {
            users: exportData.users.length,
            strategies: exportData.strategies.length,
            analyses: exportData.analyses.length
        });
        
        return exportData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function exportCurrentUserData() {
    console.log('üöÄ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const telegramUserId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id?.toString();
    if (!telegramUserId) {
        console.error('‚ùå Telegram User ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    try {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: user } = await window.supabase
            .from('users')
            .select('*')
            .eq('telegram_id', telegramUserId)
            .single();
            
        if (!user) {
            console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
            return;
        }
        
        // –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: strategies } = await window.supabase
            .from('strategies')
            .select('*')
            .eq('user_id', user.id)
            .order('created_at', { ascending: true });
            
        // –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: analyses } = await window.supabase
            .from('analysis_results')
            .select('*')
            .eq('user_id', user.id)
            .order('created_at', { ascending: true });
        
        const userData = {
            user,
            strategies: strategies || [],
            analyses: analyses || [],
            exportDate: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        const dataStr = JSON.stringify(userData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `my-data-export-${telegramUserId}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω');
        return userData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
console.log('1. exportSupabaseData() - —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');
console.log('2. exportCurrentUserData() - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
console.log('');
console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ: await exportSupabaseData()');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
// exportCurrentUserData();
