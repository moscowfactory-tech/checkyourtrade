// üë§ UNIFIED USER MANAGER - –ï–¥–∏–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// –†–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∏ –≤ Telegram WebApp

class UnifiedUserManager {
    constructor() {
        this.currentUser = null;
        this.isInitialized = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async initialize() {
        console.log('üë§ USER MANAGER: Initializing...');
        
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if (IS_TELEGRAM_WEBAPP) {
                await this.initializeTelegramUser();
            } else {
                await this.initializeBrowserUser();
            }
            
            this.isInitialized = true;
            console.log('‚úÖ USER MANAGER: User initialized:', this.currentUser);
            return this.currentUser;
        } catch (error) {
            console.error('‚ùå USER MANAGER: Initialization failed:', error);
            return null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram WebApp
    async initializeTelegramUser() {
        console.log('üì± Initializing Telegram user...');
        
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            
            if (tgUser && tgUser.id) {
                this.currentUser = {
                    id: `tg_${tgUser.id}`, // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    telegram_id: tgUser.id,
                    first_name: tgUser.first_name || '',
                    last_name: tgUser.last_name || '',
                    username: tgUser.username || '',
                    type: 'telegram'
                };
                
                console.log('üì± Telegram user data:', this.currentUser);
                return;
            }
        }
        
        // Fallback –¥–ª—è Telegram WebApp –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.warn('‚ö†Ô∏è No Telegram user data, using fallback');
        this.currentUser = {
            id: 'tg_anonymous',
            telegram_id: 0,
            first_name: 'Telegram User',
            username: 'telegram_user',
            type: 'telegram_anonymous'
        };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    async initializeBrowserUser() {
        console.log('üíª Initializing browser user...');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º ID –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let browserId = localStorage.getItem('browser_user_id');
        
        if (!browserId) {
            browserId = 'browser_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('browser_user_id', browserId);
            console.log('üíª Created new browser user ID:', browserId);
        }
        
        this.currentUser = {
            id: browserId,
            telegram_id: null,
            first_name: 'Browser User',
            username: 'browser_user',
            type: 'browser'
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è USER MANAGER: Not initialized yet');
            return null;
        }
        return this.currentUser;
    }

    // –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ë–î
    getUserId() {
        const user = this.getCurrentUser();
        return user ? user.id : null;
    }

    // –ü–æ–ª—É—á–∏—Ç—å Telegram ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
    getTelegramId() {
        const user = this.getCurrentUser();
        return user ? user.telegram_id : null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    isTelegramUser() {
        const user = this.getCurrentUser();
        return user && user.type.startsWith('telegram');
    }

    // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getDisplayName() {
        const user = this.getCurrentUser();
        if (!user) return 'Unknown User';
        
        if (user.first_name) {
            return user.last_name ? `${user.first_name} ${user.last_name}` : user.first_name;
        }
        
        return user.username || 'User';
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.userManager = new UnifiedUserManager();

console.log('üë§ Unified User Manager loaded');
