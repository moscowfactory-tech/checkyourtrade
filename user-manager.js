// üë§ UNIFIED USER MANAGER - –ï–¥–∏–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// –†–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∏ –≤ Telegram WebApp

class UnifiedUserManager {
    constructor() {
        this.currentUser = null;
        this.isInitialized = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async initialize() {
        console.log('üë§ USER MANAGER: Initializing...');
        
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if (IS_TELEGRAM_WEBAPP) {
                await this.initializeTelegramUser();
            } else {
                await this.initializeBrowserUser();
            }
            
            this.isInitialized = true;
            console.log('‚úÖ USER MANAGER: User initialized:', this.currentUser);
            return this.currentUser;
        } catch (error) {
            console.error('‚ùå USER MANAGER: Initialization failed:', error);
            return null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram WebApp
    async initializeTelegramUser() {
        console.log('üì± Initializing Telegram user...');
        
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            
            if (tgUser && tgUser.id) {
                this.currentUser = {
                    telegram_id: tgUser.id, // –û—Å–Ω–æ–≤–Ω–æ–π ID –¥–ª—è –ë–î
                    first_name: tgUser.first_name || '',
                    last_name: tgUser.last_name || '',
                    username: tgUser.username || '',
                    type: 'telegram'
                };
                
                console.log('üì± Telegram user data:', this.currentUser);
                
                // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                await this.ensureUserInDatabase();
                return;
            }
        }
        
        // Fallback –¥–ª—è Telegram WebApp –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.warn('‚ö†Ô∏è No Telegram user data, using test user');
        this.currentUser = {
            telegram_id: 123456789, // –¢–µ—Å—Ç–æ–≤—ã–π ID
            first_name: 'Test User',
            username: 'test_user',
            type: 'telegram_test'
        };
        
        await this.ensureUserInDatabase();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    async initializeBrowserUser() {
        console.log('üíª Initializing browser user...');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º telegram_id –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let browserTelegramId = localStorage.getItem('browser_telegram_id');
        
        if (!browserTelegramId) {
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π telegram_id –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
            browserTelegramId = -Math.floor(Date.now() / 1000); // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π timestamp
            localStorage.setItem('browser_telegram_id', browserTelegramId);
            console.log('üíª Created new browser telegram_id:', browserTelegramId);
        } else {
            browserTelegramId = parseInt(browserTelegramId);
        }
        
        this.currentUser = {
            telegram_id: browserTelegramId,
            first_name: 'Browser User',
            username: 'browser_user',
            type: 'browser'
        };
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await this.ensureUserInDatabase();
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è USER MANAGER: Not initialized yet');
            return null;
        }
        return this.currentUser;
    }

    // –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ë–î (UUID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users)
    getUserId() {
        const user = this.getCurrentUser();
        return user ? user.uuid : null;
    }

    // –ü–æ–ª—É—á–∏—Ç—å Telegram ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
    getTelegramId() {
        const user = this.getCurrentUser();
        return user ? user.telegram_id : null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    isTelegramUser() {
        const user = this.getCurrentUser();
        return user && user.type.startsWith('telegram');
    }

    // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getDisplayName() {
        const user = this.getCurrentUser();
        if (!user) return 'Unknown User';
        
        if (user.first_name) {
            return user.last_name ? `${user.first_name} ${user.last_name}` : user.first_name;
        }
        
        return user.username || 'User';
    }

    // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async ensureUserInDatabase() {
        if (!window.supabase) {
            console.warn('‚ö†Ô∏è Supabase not available, skipping user creation');
            return;
        }

        console.log('üíæ Ensuring user exists in database...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const { data: existingUser, error: findError } = await window.supabase
                .from('users')
                .select('id')
                .eq('telegram_id', this.currentUser.telegram_id)
                .single();

            if (existingUser) {
                console.log('‚úÖ User found in database:', existingUser.id);
                this.currentUser.uuid = existingUser.id;
            } else {
                console.log('üÜï Creating new user in database...');
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const { data: newUser, error: createError } = await window.supabase
                    .from('users')
                    .insert({
                        telegram_id: this.currentUser.telegram_id,
                        username: this.currentUser.username,
                        first_name: this.currentUser.first_name,
                        last_name: this.currentUser.last_name
                    })
                    .select('id')
                    .single();

                if (createError) {
                    console.error('‚ùå Error creating user:', createError);
                } else {
                    console.log('‚úÖ User created:', newUser.id);
                    this.currentUser.uuid = newUser.id;
                }
            }
        } catch (error) {
            console.error('‚ùå Error in ensureUserInDatabase:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.userManager = new UnifiedUserManager();

console.log('üë§ Unified User Manager loaded');
