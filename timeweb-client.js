// –ö–õ–ò–ï–ù–¢ –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TIMEWEB API
// –ó–∞–º–µ–Ω–∞ –¥–ª—è supabase-config.js

const TIMEWEB_CONFIG = {
    // API endpoint - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–æ–º –∂–µ –¥–æ–º–µ–Ω–µ)
    apiUrl: 'http://185.207.64.160/api',
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    development: {
        apiUrl: 'http://localhost:5000/api'
    },
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    isDevelopment: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Timeweb API (—ç–º—É–ª—è—Ü–∏—è Supabase)
class TimewebClient {
    constructor(config) {
        this.config = config;
        this.apiUrl = config.isDevelopment ? config.development.apiUrl : config.apiUrl;
        console.log('üîó Timeweb API URL:', this.apiUrl);
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–¥ API Timeweb
    prepareInsertBody(data) {
        let body = { ...data };
        if (this.tableName === 'user_events') {
            const tgFromClient = this.getTelegramUserId();
            const tgFromUM = (window.userManager && typeof window.userManager.getTelegramId === 'function')
                ? window.userManager.getTelegramId()
                : null;
            const rawTg = (body.telegram_user_id ?? tgFromClient ?? tgFromUM ?? null);
            const telegram_user_id = rawTg !== null && rawTg !== undefined ? String(rawTg) : null;
            const event_type = body.event_type || body.event_name || body.type || 'event';
            const event_data = body.event_data || body.properties || body.data || {};
            body = { telegram_user_id, event_type, event_data };
        }
        return body;
    }
    
    // –≠–º—É–ª—è—Ü–∏—è Supabase .from() –º–µ—Ç–æ–¥–∞
    from(table) {
        return new TimewebTable(table, this.apiUrl);
    }
    
    // –ü—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
    async request(endpoint, options = {}) {
        try {
            const url = `${this.apiUrl}${endpoint}`;
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            return result;
            
        } catch (error) {
            console.error('Timeweb API request error:', error);
            return { data: null, error: error.message };
        }
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ (—ç–º—É–ª—è—Ü–∏—è Supabase)
class TimewebTable {
    constructor(tableName, apiUrl) {
        this.tableName = tableName;
        this.apiUrl = apiUrl;
        this.selectColumns = '*';
        this.whereConditions = {};
        this.orderByClause = '';
        this.limitClause = '';
        this.returnSingle = false;
        this.insertData = null; // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ insert().select()
        this._pendingPromise = null; // –ü—Ä–æ–º–∏—Å –¥–ª—è insert().select()
    }
    
    // –î–µ–ª–∞–µ—Ç –±–∏–ª–¥–µ—Ä thenable, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ: await from(...).select(...).eq(...)
    then(resolve, reject) {
        return this.execute().then(resolve, reject);
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–¥ API Timeweb
    prepareInsertBody(data) {
        let body = { ...data };
        if (this.tableName === 'user_events') {
            const tgFromClient = this.getTelegramUserId();
            const tgFromUM = (window.userManager && typeof window.userManager.getTelegramId === 'function')
                ? window.userManager.getTelegramId()
                : null;
            const rawTg = (body.telegram_user_id ?? tgFromClient ?? tgFromUM ?? null);
            const telegram_user_id = (rawTg !== null && rawTg !== undefined) ? String(rawTg) : null;
            const event_type = body.event_type || body.event_name || body.type || 'event';
            const event_data = body.event_data || body.properties || body.data || {};
            body = { telegram_user_id, event_type, event_data };
        }
        return body;
    }
    
    eq(column, value) {
        this.whereConditions[column] = value;
        return this;
    }
    
    order(column, options = {}) {
        const direction = options.ascending === false ? 'desc' : 'asc';
        this.orderByClause = `${column}_${direction}`;
        return this;
    }
    
    limit(count) {
        this.limitClause = count;
        return this;
    }
    
    async single() {
        this.returnSingle = true;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–ø–æ—Å–ª–µ insert().select())
        if (this._pendingPromise) {
            const result = await this._pendingPromise;
            this._pendingPromise = null;
            if (result && result.data) {
                if (Array.isArray(result.data)) {
                    return { data: result.data[0] || null, error: result.error };
                }
                return { data: result.data, error: result.error };
            }
            return { data: null, error: result?.error || null };
        }
        
        return this;
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞
    async execute() {
        try {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å (–ø–æ—Å–ª–µ insert().select()), –≤–µ—Ä–Ω—ë–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (this._pendingPromise) {
                const res = await this._pendingPromise;
                this._pendingPromise = null;
                return res;
            }
            // –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ insert() –±–µ–∑ select(), –≤—ã–ø–æ–ª–Ω–∏–º POST –∑–¥–µ—Å—å
            if (this.insertData) {
                const data = this.insertData;
                this.insertData = null;
                try {
                    // –ì–æ—Ç–æ–≤–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
                    const payload = this.prepareInsertBody(data);
                    if (this.tableName === 'user_events') {
                        try { console.log('üìä user_events payload (execute):', payload); } catch (_) {}
                    }
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
                    let endpoint = this.tableName;
                    if (this.tableName === 'strategies') {
                        endpoint = 'strategies';
                    } else if (this.tableName === 'analysis_results') {
                        endpoint = 'analysis_results';
                    }
                    
                    const response = await fetch(`${this.apiUrl}/${endpoint}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    let parsed = null;
                    try { parsed = await response.json(); } catch (_) {}
                    if (!response.ok) {
                        let msg = parsed?.error || parsed?.message || '';
                        if (!msg) { try { msg = await response.text(); } catch (_) { msg = ''; } }
                        if (this.tableName === 'user_events') {
                            try { console.error('‚ùå user_events POST failed:', response.status, msg || parsed); } catch (_) {}
                        }
                        return { data: null, error: `HTTP ${response.status}${msg ? ' ' + msg : ''}` };
                    }
                    return parsed ?? { data: null, error: null };
                } catch (e) {
                    return { data: null, error: e.message };
                }
            }
            const params = new URLSearchParams();
            
            // –î–æ–±–∞–≤–ª—è–µ–º telegram_user_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            let tgId = this.whereConditions.telegram_user_id || this.whereConditions.telegram_id;
            // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç –ø–æ user_id (UUID), –º–∞–ø–ø–∏–º –Ω–∞ telegram_user_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!tgId && this.whereConditions.user_id) {
                const umTg = (window.userManager && typeof window.userManager.getTelegramId === 'function')
                    ? window.userManager.getTelegramId()
                    : null;
                if (umTg) tgId = String(umTg);
            }
            if (tgId !== undefined && tgId !== null) {
                params.append('telegram_user_id', String(tgId));
            }
            
            // –î–ª—è strategies –∏ analysis_results –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            let endpoint = this.tableName;
            if (this.tableName === 'strategies') {
                endpoint = 'strategies';
            } else if (this.tableName === 'analysis_results') {
                endpoint = 'analysis_results';
            }
            
            const url = `${this.apiUrl}/${endpoint}?${params.toString()}`;
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (this.returnSingle && result.data && result.data.length > 0) {
                return { data: result.data[0], error: result.error };
            }
            
            return result;
            
        } catch (error) {
            console.error('Table query error:', error);
            return { data: null, error: error.message };
        }
    }
    
    // INSERT –æ–ø–µ—Ä–∞—Ü–∏—è
    insert(data) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        this.insertData = data;
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º this –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ .select()
        return this;
    }
    
    // –ú–µ—Ç–æ–¥ select() - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è SELECT –∏ –ø–æ—Å–ª–µ INSERT
    select(columns = '*') {
        if (this.insertData) {
            // –≠—Ç–æ –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ insert() - –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å
            const data = this.insertData;
            this.insertData = null;
            this._pendingPromise = (async () => {
                try {
                    // –î–æ–±–∞–≤–ª—è–µ–º telegram_user_id –µ—Å–ª–∏ –µ—Å—Ç—å Telegram –¥–∞–Ω–Ω—ã–µ
                    const telegramUserId = this.getTelegramUserId();
                    if (telegramUserId && !data.telegram_user_id) {
                        data.telegram_user_id = telegramUserId;
                    }
                    
                    // –ì–æ—Ç–æ–≤–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
                    const payload = this.prepareInsertBody(data);
                    if (this.tableName === 'user_events') {
                        try { console.log('üìä user_events payload:', payload); } catch (_) {}
                    }

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
                    let endpoint = this.tableName;
                    if (this.tableName === 'strategies') {
                        endpoint = 'strategies';
                    } else if (this.tableName === 'analysis_results') {
                        endpoint = 'analysis_results';
                    }
                    
                    const response = await fetch(`${this.apiUrl}/${endpoint}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(payload)
                    });
                    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    let parsed = null;
                    try { parsed = await response.json(); } catch (_) {}
                    if (!response.ok) {
                        let msg = parsed?.error || parsed?.message || '';
                        if (!msg) {
                            try { msg = await response.text(); } catch (_) { msg = ''; }
                        }
                        return { data: null, error: `HTTP ${response.status}${msg ? ' ' + msg : ''}` };
                    }
                    return parsed ?? { data: null, error: null };
                } catch (error) {
                    console.error('Insert error:', error);
                    return { data: null, error: error.message };
                }
            })();
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º this –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ .single()
            return this;
        } else {
            // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π select –¥–ª—è SELECT –∑–∞–ø—Ä–æ—Å–∞
            this.selectColumns = columns;
            return this;
        }
    }
    
    // UPDATE –æ–ø–µ—Ä–∞—Ü–∏—è
    async update(data) {
        try {
            // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω—É–∂–µ–Ω ID –∏–∑ —É—Å–ª–æ–≤–∏–π
            const id = this.whereConditions.id;
            if (!id) {
                throw new Error('ID is required for update operation');
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            let endpoint = this.tableName;
            if (this.tableName === 'strategies') {
                endpoint = 'strategies';
            } else if (this.tableName === 'analysis_results') {
                endpoint = 'analysis_results';
            }
            
            const response = await fetch(`${this.apiUrl}/${endpoint}/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            return result;
            
        } catch (error) {
            console.error('Update error:', error);
            return { data: null, error: error.message };
        }
    }
    
    // DELETE –æ–ø–µ—Ä–∞—Ü–∏—è
    async delete() {
        try {
            const id = this.whereConditions.id;
            if (!id) {
                throw new Error('ID is required for delete operation');
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            let endpoint = this.tableName;
            if (this.tableName === 'strategies') {
                endpoint = 'strategies';
            } else if (this.tableName === 'analysis_results') {
                endpoint = 'analysis_results';
            }
            
            const response = await fetch(`${this.apiUrl}/${endpoint}/${id}`, {
                method: 'DELETE'
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return { error: null };
            
        } catch (error) {
            console.error('Delete error:', error);
            return { error: error.message };
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram User ID
    getTelegramUserId() {
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            return window.Telegram.WebApp.initDataUnsafe.user?.id?.toString();
        }
        return null;
    }
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º
class TimewebCompatibility {
    constructor(client) {
        this.client = client;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserStats() {
        const telegramUserId = this.getTelegramUserId();
        if (!telegramUserId) {
            return { data: { strategies: 0, analyses: 0 }, error: null };
        }
        
        try {
            const response = await fetch(`${this.client.apiUrl}/users/stats/${telegramUserId}`);
            const result = await response.json();
            return result;
        } catch (error) {
            return { data: { strategies: 0, analyses: 0 }, error: error.message };
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    async healthCheck() {
        try {
            const response = await fetch(`${this.client.apiUrl}/health`);
            const result = await response.json();
            return result;
        } catch (error) {
            return { status: 'unhealthy', error: error.message };
        }
    }
    
    getTelegramUserId() {
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            return window.Telegram.WebApp.initDataUnsafe.user?.id?.toString();
        }
        return null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
let timewebClient;
let timewebCompat;

function initializeTimeweb() {
    try {
        timewebClient = new TimewebClient(TIMEWEB_CONFIG);
        timewebCompat = new TimewebCompatibility(timewebClient);
        
        // –ó–∞–º–µ–Ω—è–µ–º window.supabase –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º
        window.supabase = timewebClient;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        window.supabase.getUserStats = timewebCompat.getUserStats.bind(timewebCompat);
        window.supabase.healthCheck = timewebCompat.healthCheck.bind(timewebCompat);
        
        console.log('‚úÖ Timeweb client initialized successfully');
        console.log('üîó API URL:', timewebClient.apiUrl);
        
        return timewebClient;
        
    } catch (error) {
        console.error('‚ùå Error initializing Timeweb client:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testTimewebConnection() {
    try {
        if (!timewebCompat) {
            console.error('Timeweb client not initialized');
            return false;
        }
        
        const health = await timewebCompat.healthCheck();
        
        if (health.status === 'healthy') {
            console.log('‚úÖ Timeweb connection successful');
            return true;
        } else {
            console.error('‚ùå Timeweb connection failed:', health.error);
            return false;
        }
    } catch (err) {
        console.error('‚ùå Timeweb connection test failed:', err);
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Initializing Timeweb client...');
    
    const client = initializeTimeweb();
    if (client) {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(testTimewebConnection, 2000);
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.TIMEWEB_CONFIG = TIMEWEB_CONFIG;
window.initializeTimeweb = initializeTimeweb;
window.testTimewebConnection = testTimewebConnection;

console.log('üîß Timeweb client configuration loaded');
