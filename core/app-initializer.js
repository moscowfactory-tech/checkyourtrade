// ========================================
// APP INITIALIZER v1.0
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ========================================

class AppInitializer {
    constructor() {
        this.initSteps = [];
        this.isInitialized = false;
        this.initErrors = [];
        this.managers = {};
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    addInitStep(name, asyncFunction, required = true) {
        this.initSteps.push({
            name,
            function: asyncFunction,
            required,
            completed: false,
            error: null
        });
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async initialize() {
        console.log('üöÄ APP INITIALIZER: Starting application initialization...');
        
        try {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–≥–∏
            this.registerStandardSteps();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            for (const step of this.initSteps) {
                await this.executeStep(step);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const criticalErrors = this.initSteps.filter(s => s.required && s.error);
            
            if (criticalErrors.length > 0) {
                throw new Error(`Critical initialization errors: ${criticalErrors.map(s => s.name).join(', ')}`);
            }

            this.isInitialized = true;
            console.log('‚úÖ APP INITIALIZER: Application initialized successfully');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.notifyInitializationComplete();
            
            return {
                success: true,
                steps: this.initSteps,
                managers: this.managers
            };

        } catch (error) {
            console.error('‚ùå APP INITIALIZER: Initialization failed:', error);
            
            return {
                success: false,
                error: error.message,
                steps: this.initSteps
            };
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    registerStandardSteps() {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
        this.addInitStep('Supabase Connection', async () => {
            console.log('üîå Initializing Supabase connection...');
            
            if (!window.supabase) {
                throw new Error('Supabase client not found');
            }

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            const { data, error } = await window.supabase
                .from('schema_version')
                .select('version')
                .limit(1);

            if (error) {
                throw new Error(`Supabase connection failed: ${error.message}`);
            }

            console.log('‚úÖ Supabase connected');
            return { supabase: window.supabase };
        });

        // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        this.addInitStep('Database Validation', async () => {
            console.log('üîç Validating database schema...');
            
            if (!window.DatabaseValidator) {
                console.warn('‚ö†Ô∏è DatabaseValidator not available, skipping validation');
                return { skipped: true };
            }

            const validator = new window.DatabaseValidator(window.supabase);
            const result = await validator.validateDatabase();
            
            if (!result.isValid) {
                throw new Error(`Database validation failed: ${result.message}`);
            }

            console.log('‚úÖ Database schema validated');
            return result;
        });

        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        this.addInitStep('Telegram Integration', async () => {
            console.log('üì± Initializing Telegram integration...');
            
            let telegramUser = null;
            
            if (window.initializeTelegramWebApp) {
                telegramUser = window.initializeTelegramWebApp();
            }

            console.log('‚úÖ Telegram integration initialized');
            return { telegramUser };
        });

        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserManager
        this.addInitStep('User Manager', async () => {
            console.log('üë§ Initializing User Manager...');
            
            if (!window.UserManager) {
                throw new Error('UserManager not available');
            }

            const userManager = new window.UserManager(window.supabase);
            await userManager.initialize();
            
            this.managers.userManager = userManager;
            
            console.log('‚úÖ User Manager initialized');
            return { userManager };
        }, false); // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

        // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StrategyManager
        this.addInitStep('Strategy Manager', async () => {
            console.log('üéØ Initializing Strategy Manager...');
            
            if (!window.StrategyManager) {
                throw new Error('StrategyManager not available');
            }

            const strategyManager = new window.StrategyManager(
                window.supabase, 
                this.managers.userManager
            );
            
            await strategyManager.initialize();
            
            this.managers.strategyManager = strategyManager;
            
            console.log('‚úÖ Strategy Manager initialized');
            return { strategyManager };
        });

        // 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.addInitStep('UI Components', async () => {
            console.log('üé® Initializing UI components...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            if (window.initializeModals) {
                window.initializeModals();
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            if (window.initializeEventHandlers) {
                window.initializeEventHandlers();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (window.updateUserStats) {
                setTimeout(window.updateUserStats, 1000);
            }

            console.log('‚úÖ UI components initialized');
            return { ui: 'initialized' };
        }, false); // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞
    async executeStep(step) {
        console.log(`‚è≥ Executing step: ${step.name}`);
        
        try {
            const startTime = Date.now();
            const result = await step.function();
            const duration = Date.now() - startTime;
            
            step.completed = true;
            step.result = result;
            step.duration = duration;
            
            console.log(`‚úÖ Step completed: ${step.name} (${duration}ms)`);
            
        } catch (error) {
            step.error = error;
            step.completed = false;
            
            console.error(`‚ùå Step failed: ${step.name}`, error);
            
            if (step.required) {
                throw error;
            }
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    notifyInitializationComplete() {
        const event = new CustomEvent('appInitialized', {
            detail: {
                success: this.isInitialized,
                steps: this.initSteps,
                managers: this.managers
            }
        });
        
        if (typeof window !== 'undefined') {
            window.dispatchEvent(event);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    getInitializationStatus() {
        return {
            isInitialized: this.isInitialized,
            steps: this.initSteps.map(step => ({
                name: step.name,
                completed: step.completed,
                required: step.required,
                error: step.error ? step.error.message : null,
                duration: step.duration || null
            })),
            managers: Object.keys(this.managers)
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
    getManager(name) {
        return this.managers[name] || null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    isAppReady() {
        return this.isInitialized;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeApp() {
    const initializer = new AppInitializer();
    const result = await initializer.initialize();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.appInitializer = initializer;
    
    return result;
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof window !== 'undefined') {
    window.AppInitializer = AppInitializer;
    window.initializeApp = initializeApp;
}

console.log('üöÄ App Initializer loaded');
