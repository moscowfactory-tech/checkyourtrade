// –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è TradeAnalyzer
console.log('üöÄ Starting TradeAnalyzer Simple Version');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let strategies = [];
let savedAnalyses = [];
let currentAnalysisStrategy = null;
let currentCardIndex = 0;
let analysisAnswers = [];
let isEditMode = false;
let currentStrategy = null;

// –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
const sampleStrategies = [
    {
        id: 1,
        name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è",
        description: "–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã",
        fields: [
            {
                name: "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞",
                description: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞",
                inputs: [
                    {
                        type: "select",
                        label: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞",
                        options: ["–í–æ—Å—Ö–æ–¥—è—â–∏–π", "–ù–∏—Å—Ö–æ–¥—è—â–∏–π", "–ë–æ–∫–æ–≤–æ–π"],
                        required: true
                    },
                    {
                        type: "select",
                        label: "–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞",
                        options: ["–°–∏–ª—å–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–°–ª–∞–±—ã–π"],
                        required: true
                    }
                ]
            },
            {
                name: "–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                description: "–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π",
                inputs: [
                    {
                        type: "select",
                        label: "–ë–ª–∏–∑–æ—Å—Ç—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
                        options: ["–û—á–µ–Ω—å –±–ª–∏–∑–∫–æ", "–ë–ª–∏–∑–∫–æ", "–î–∞–ª–µ–∫–æ"],
                        required: true
                    },
                    {
                        type: "select",
                        label: "–ë–ª–∏–∑–æ—Å—Ç—å –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é",
                        options: ["–û—á–µ–Ω—å –±–ª–∏–∑–∫–æ", "–ë–ª–∏–∑–∫–æ", "–î–∞–ª–µ–∫–æ"],
                        required: true
                    }
                ]
            }
        ]
    },
    {
        id: 2,
        name: "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        description: "–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
        fields: [
            {
                name: "–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π",
                description: "–û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—ã–Ω–æ–∫",
                inputs: [
                    {
                        type: "select",
                        label: "–¢–∏–ø –Ω–æ–≤–æ—Å—Ç–µ–π",
                        options: ["–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"],
                        required: true
                    },
                    {
                        type: "select",
                        label: "–í–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π",
                        options: ["–í—ã—Å–æ–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ù–∏–∑–∫–∞—è"],
                        required: true
                    }
                ]
            },
            {
                name: "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
                description: "–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                inputs: [
                    {
                        type: "select",
                        label: "–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏",
                        options: ["–†–∞—Å—Ç—É—â–∞—è", "–°—Ç–∞–±–∏–ª—å–Ω–∞—è", "–ü–∞–¥–∞—é—â–∞—è"],
                        required: true
                    }
                ]
            }
        ]
    },
    {
        id: 3,
        name: "–ü—Ä–æ–±–æ–π",
        description: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –ø—Ä–æ–±–æ—è—Ö —É—Ä–æ–≤–Ω–µ–π",
        fields: [
            {
                name: "–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ—è",
                description: "–û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–æ—è",
                inputs: [
                    {
                        type: "select",
                        label: "–¢–∏–ø —É—Ä–æ–≤–Ω—è",
                        options: ["–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ", "–¢—Ä–µ–Ω–¥–æ–≤–∞—è –ª–∏–Ω–∏—è"],
                        required: true
                    },
                    {
                        type: "select",
                        label: "–°–∏–ª–∞ –ø—Ä–æ–±–æ—è",
                        options: ["–°–∏–ª—å–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–°–ª–∞–±—ã–π"],
                        required: true
                    }
                ]
            },
            {
                name: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è",
                description: "–ê–Ω–∞–ª–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
                inputs: [
                    {
                        type: "select",
                        label: "–û–±—ä–µ–º –ø—Ä–∏ –ø—Ä–æ–±–æ–µ",
                        options: ["–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"],
                        required: true
                    },
                    {
                        type: "select",
                        label: "–†–µ—Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è",
                        options: ["–£—Å–ø–µ—à–Ω—ã–π", "–ù–µ—É—Å–ø–µ—à–Ω—ã–π", "–ù–µ –±—ã–ª–æ"],
                        required: true
                    }
                ]
            }
        ]
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìã DOM loaded, initializing...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    loadStrategies();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers();
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    renderStrategies();
    updateStrategySelect();
    
    console.log('‚úÖ TradeAnalyzer initialized');
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
function loadStrategies() {
    console.log('üìÇ Loading strategies...');
    
    // –û—á–∏—â–∞–µ–º localStorage
    console.log('üßπ Clearing localStorage...');
    localStorage.removeItem('strategies');
    localStorage.removeItem('savedAnalyses');
    localStorage.removeItem('analyses');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î)
    strategies = [...sampleStrategies];
    savedAnalyses = [];
    
    console.log('‚úÖ Using fresh sample strategies:', strategies.length);
    console.log('‚úÖ Cleared saved analyses');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    console.log('üîó Setting up event handlers...');
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
    document.addEventListener('click', function(e) {
        const target = e.target;
        const targetId = target.id;
        const closest = target.closest ? target.closest('[id]') : null;
        const closestId = closest ? closest.id : null;
        
        console.log('üñ±Ô∏è Click detected:', targetId || closestId || 'unknown');
        
        // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
        if (targetId === 'supportProjectBtn' || closestId === 'supportProjectBtn' ||
            targetId === 'supportProjectFooterBtn' || closestId === 'supportProjectFooterBtn') {
            e.preventDefault();
            console.log('üíñ Opening support modal');
            openSupportModal();
            return;
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –∞–Ω–∞–ª–∏–∑—ã"
        if (targetId === 'myAnalysesBtn' || closestId === 'myAnalysesBtn') {
            e.preventDefault();
            console.log('üìä Opening analyses modal');
            openAnalysesModal();
            return;
        }
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º
        if (target.hasAttribute('data-section')) {
            e.preventDefault();
            const section = target.getAttribute('data-section');
            console.log('üß≠ Navigating to section:', section);
            showSection(section);
            return;
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if (targetId === 'createStrategyBtn' || target.textContent.includes('–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é')) {
            e.preventDefault();
            console.log('‚ûï Opening strategy modal');
            openModal();
            return;
        }
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
        if (targetId === 'prevBtn') {
            e.preventDefault();
            handlePrevCard();
            return;
        }
        
        if (targetId === 'nextBtn') {
            e.preventDefault();
            handleNextCard();
            return;
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        if (targetId === 'closeSupportModalBtn' || targetId === 'closeSupportBtn') {
            e.preventDefault();
            closeSupportModal();
            return;
        }
        
        if (targetId === 'closeAnalysesModalBtn' || targetId === 'closeAnalysesBtn') {
            e.preventDefault();
            closeAnalysesModal();
            return;
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ backdrop
        if (target.classList.contains('modal-backdrop') || target.classList.contains('modal')) {
            if (target.closest('#supportModal')) {
                closeSupportModal();
            } else if (target.closest('#analysesModal')) {
                closeAnalysesModal();
            }
        }
    });
    
    console.log('‚úÖ Event handlers set up');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
function showSection(sectionName) {
    console.log('üìÑ Showing section:', sectionName);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    const sections = document.querySelectorAll('main > section, main > div');
    sections.forEach(section => {
        section.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
    let targetSection;
    switch(sectionName) {
        case 'home':
            targetSection = document.querySelector('.hero').parentElement;
            break;
        case 'constructor':
            targetSection = document.getElementById('constructor');
            break;
        case 'analysis':
            targetSection = document.getElementById('analysis');
            break;
    }
    
    if (targetSection) {
        targetSection.style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
        if (sectionName === 'constructor') {
            renderStrategies();
        } else if (sectionName === 'analysis') {
            updateStrategySelect();
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('data-section') === sectionName) {
            link.classList.add('active');
        }
    });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
function renderStrategies() {
    console.log('üé® Rendering strategies...');
    
    const strategiesGrid = document.getElementById('strategiesGrid');
    if (!strategiesGrid) {
        console.error('‚ùå strategiesGrid not found');
        return;
    }
    
    strategiesGrid.innerHTML = '';
    
    if (strategies.length === 0) {
        strategiesGrid.innerHTML = `
            <div class="empty-state">
                <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!</p>
            </div>
        `;
        return;
    }
    
    strategies.forEach(strategy => {
        const strategyCard = document.createElement('div');
        strategyCard.className = 'strategy-card';
        strategyCard.innerHTML = `
            <div class="strategy-header">
                <h3>${strategy.name}</h3>
                <div class="strategy-actions">
                    <button class="btn btn--sm btn--outline" onclick="editStrategy(${strategy.id})">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn--sm btn--outline btn--danger" onclick="deleteStrategy(${strategy.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <p class="strategy-description">${strategy.description}</p>
            <div class="strategy-stats">
                <span class="stat">
                    <i class="fas fa-list"></i>
                    ${strategy.fields.length} –æ—Å–Ω–æ–≤–∞–Ω–∏–π
                </span>
            </div>
        `;
        strategiesGrid.appendChild(strategyCard);
    });
    
    console.log('‚úÖ Rendered', strategies.length, 'strategies');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
function updateStrategySelect() {
    console.log('üîÑ Updating strategy select...');
    
    const strategySelect = document.getElementById('strategySelect');
    if (!strategySelect) {
        console.error('‚ùå strategySelect not found');
        return;
    }
    
    strategySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...</option>';
    
    strategies.forEach(strategy => {
        const option = document.createElement('option');
        option.value = strategy.id;
        option.textContent = strategy.name;
        strategySelect.appendChild(option);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategySelect.addEventListener('change', function(e) {
        const strategyId = parseInt(e.target.value);
        if (strategyId) {
            const strategy = strategies.find(s => s.id === strategyId);
            if (strategy) {
                startCardAnalysis(strategy);
            }
        } else {
            hideCardAnalysis();
        }
    });
    
    console.log('‚úÖ Updated strategy select with', strategies.length, 'options');
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function openSupportModal() {
    console.log('üíñ Opening support modal');
    const modal = document.getElementById('supportModal');
    if (modal) {
        modal.classList.remove('hidden');
        modal.classList.add('active');
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        console.log('‚úÖ Support modal opened');
    } else {
        console.error('‚ùå Support modal not found');
    }
}

function closeSupportModal() {
    console.log('üíñ Closing support modal');
    const modal = document.getElementById('supportModal');
    if (modal) {
        modal.classList.remove('active');
        setTimeout(() => {
            modal.classList.add('hidden');
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }, 300);
    }
}

function openAnalysesModal() {
    console.log('üìä Opening analyses modal');
    const modal = document.getElementById('analysesModal');
    if (modal) {
        renderAnalysesList();
        modal.classList.remove('hidden');
        modal.classList.add('active');
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        console.log('‚úÖ Analyses modal opened');
    } else {
        console.error('‚ùå Analyses modal not found');
    }
}

function closeAnalysesModal() {
    console.log('üìä Closing analyses modal');
    const modal = document.getElementById('analysesModal');
    if (modal) {
        modal.classList.remove('active');
        setTimeout(() => {
            modal.classList.add('hidden');
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }, 300);
    }
}

function renderAnalysesList() {
    const analysesList = document.getElementById('analysesList');
    if (!analysesList) return;
    
    analysesList.innerHTML = '';
    
    if (savedAnalyses.length === 0) {
        analysesList.innerHTML = '<p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤</p>';
        return;
    }
    
    savedAnalyses.forEach((analysis, index) => {
        const analysisCard = document.createElement('div');
        analysisCard.className = 'analysis-card';
        analysisCard.innerHTML = `
            <h4>${analysis.strategyName}</h4>
            <p>–î–∞—Ç–∞: ${new Date(analysis.date).toLocaleDateString()}</p>
            <div class="analysis-actions">
                <button class="btn btn--outline btn--sm" onclick="viewAnalysis(${index})">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                <button class="btn btn--outline btn--sm" onclick="deleteAnalysis(${index})">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        analysesList.appendChild(analysisCard);
    });
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
function openModal() {
    console.log('‚ûï Opening strategy modal (placeholder)');
    alert('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
function editStrategy(id) {
    console.log('‚úèÔ∏è Edit strategy:', id);
    alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
}

function deleteStrategy(id) {
    console.log('üóëÔ∏è Delete strategy:', id);
    if (confirm('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é?')) {
        strategies = strategies.filter(s => s.id !== id);
        // TODO: –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        // await StrategyDB.delete(id);
        renderStrategies();
        updateStrategySelect();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫
function startCardAnalysis(strategy) {
    console.log('üéØ Starting card analysis for:', strategy.name);
    console.log('üìä Strategy data:', strategy);
    
    currentAnalysisStrategy = strategy;
    currentCardIndex = 0;
    analysisAnswers = new Array(strategy.fields.length).fill(null);
    
    const cardAnalysisContainer = document.getElementById('cardAnalysisContainer');
    const analysisResults = document.getElementById('analysisResults');
    
    console.log('üîç Container elements:', {
        cardAnalysisContainer: !!cardAnalysisContainer,
        analysisResults: !!analysisResults
    });
    
    if (cardAnalysisContainer) {
        cardAnalysisContainer.classList.remove('hidden');
        cardAnalysisContainer.style.display = 'block';
        console.log('‚úÖ Card analysis container shown');
        
        renderCurrentCard();
        updateProgress();
        updateNavigation();
    } else {
        console.error('‚ùå cardAnalysisContainer not found');
    }
    
    if (analysisResults) {
        analysisResults.classList.add('hidden');
    }
}

function hideCardAnalysis() {
    const cardAnalysisContainer = document.getElementById('cardAnalysisContainer');
    const analysisResults = document.getElementById('analysisResults');
    
    if (cardAnalysisContainer) {
        cardAnalysisContainer.classList.add('hidden');
    }
    if (analysisResults) {
        analysisResults.classList.add('hidden');
    }
}

function renderCurrentCard() {
    console.log('üé® Rendering current card:', currentCardIndex);
    
    if (!currentAnalysisStrategy || currentCardIndex >= currentAnalysisStrategy.fields.length) {
        console.error('‚ùå No strategy or invalid card index');
        return;
    }
    
    const field = currentAnalysisStrategy.fields[currentCardIndex];
    console.log('üìã Current field:', field);
    
    const cardTitle = document.getElementById('cardTitle');
    const cardDescription = document.getElementById('cardDescription');
    const cardInputs = document.getElementById('cardInputs');
    
    console.log('üîç Card elements found:', {
        cardTitle: !!cardTitle,
        cardDescription: !!cardDescription,
        cardInputs: !!cardInputs
    });
    
    if (cardTitle) {
        cardTitle.textContent = field.name;
        console.log('‚úÖ Title set:', field.name);
    }
    
    if (cardDescription) {
        cardDescription.textContent = field.description;
        console.log('‚úÖ Description set:', field.description);
    }
    
    if (cardInputs) {
        cardInputs.innerHTML = '';
        console.log('üßπ Cleared inputs container');
        
        if (field.inputs && field.inputs.length > 0) {
            field.inputs.forEach((input, inputIndex) => {
                console.log('üîß Creating input:', input);
                
                const inputContainer = document.createElement('div');
                inputContainer.className = 'input-container';
                inputContainer.style.marginBottom = '16px';
                
                const label = document.createElement('label');
                label.textContent = input.label;
                label.className = 'form-label';
                label.style.cssText = `
                    display: block;
                    margin-bottom: 8px;
                    font-weight: 500;
                    color: var(--color-text-primary, #333);
                `;
                inputContainer.appendChild(label);
                
                if (input.type === 'select') {
                    const select = document.createElement('select');
                    select.className = 'form-control';
                    select.style.cssText = `
                        width: 100%;
                        padding: 12px;
                        border: 1px solid var(--color-border, #ddd);
                        border-radius: 8px;
                        background: var(--color-surface, #fff);
                        color: var(--color-text-primary, #333);
                        font-size: 14px;
                    `;
                    select.addEventListener('change', (e) => handleCardInput(inputIndex, e.target.value));
                    
                    const defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ...';
                    select.appendChild(defaultOption);
                    
                    input.options.forEach(option => {
                        const optionElement = document.createElement('option');
                        optionElement.value = option;
                        optionElement.textContent = option;
                        select.appendChild(optionElement);
                    });
                    
                    inputContainer.appendChild(select);
                    console.log('‚úÖ Select created with', input.options.length, 'options');
                }
                
                cardInputs.appendChild(inputContainer);
            });
            
            console.log('‚úÖ All inputs created:', field.inputs.length);
        } else {
            console.error('‚ùå No inputs found in field');
        }
    } else {
        console.error('‚ùå cardInputs element not found');
    }
    
    console.log('‚úÖ Card rendered successfully');
}

function handleCardInput(inputIndex, value) {
    if (!analysisAnswers[currentCardIndex]) {
        analysisAnswers[currentCardIndex] = {
            fieldName: currentAnalysisStrategy.fields[currentCardIndex].name,
            fieldValues: {}
        };
    }
    
    analysisAnswers[currentCardIndex].fieldValues[inputIndex] = value;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const field = currentAnalysisStrategy.fields[currentCardIndex];
    const allFilled = field.inputs.every((input, idx) => {
        return !input.required || analysisAnswers[currentCardIndex].fieldValues[idx];
    });
    
    const nextBtn = document.getElementById('nextBtn');
    if (nextBtn) {
        nextBtn.disabled = !allFilled;
    }
}

function updateProgress() {
    const current = currentCardIndex + 1;
    const total = currentAnalysisStrategy.fields.length;
    
    const progressText = document.getElementById('progressText');
    const progressFill = document.getElementById('progressFill');
    
    if (progressText) {
        progressText.textContent = `–ö–∞—Ä—Ç–æ—á–∫–∞ ${current} –∏–∑ ${total}`;
    }
    
    if (progressFill) {
        const percentage = (current / total) * 100;
        progressFill.style.width = `${percentage}%`;
    }
}

function updateNavigation() {
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const nextBtnText = document.getElementById('nextBtnText');
    
    if (prevBtn) {
        prevBtn.disabled = currentCardIndex === 0;
    }
    
    const isLastCard = currentCardIndex === currentAnalysisStrategy.fields.length - 1;
    if (nextBtnText) {
        nextBtnText.textContent = isLastCard ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑' : '–î–∞–ª–µ–µ ‚Üí';
    }
    
    const currentAnswer = analysisAnswers[currentCardIndex];
    if (nextBtn) {
        nextBtn.disabled = !currentAnswer;
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
function handlePrevCard() {
    if (currentCardIndex > 0) {
        currentCardIndex--;
        renderCurrentCard();
        updateProgress();
        updateNavigation();
    }
}

function handleNextCard() {
    const currentAnswer = analysisAnswers[currentCardIndex];
    
    if (!currentAnswer) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }
    
    if (currentCardIndex < currentAnalysisStrategy.fields.length - 1) {
        currentCardIndex++;
        renderCurrentCard();
        updateProgress();
        updateNavigation();
    } else {
        completeAnalysis();
    }
}

function completeAnalysis() {
    console.log('üéØ Analysis completed');
    
    const analysis = {
        id: Date.now(),
        strategyName: currentAnalysisStrategy.name,
        strategyId: currentAnalysisStrategy.id,
        date: new Date().toISOString(),
        answers: analysisAnswers
    };
    
    savedAnalyses.push(analysis);
    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // await AnalysisDB.create(analysis);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    displayAnalysisResults(analysis);
}

function displayAnalysisResults(analysis) {
    const cardAnalysisContainer = document.getElementById('cardAnalysisContainer');
    const analysisResults = document.getElementById('analysisResults');
    
    if (cardAnalysisContainer) {
        cardAnalysisContainer.classList.add('hidden');
    }
    
    if (analysisResults) {
        analysisResults.classList.remove('hidden');
        
        let resultsHTML = `
            <div class="analysis-summary">
                <h3>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</h3>
                <p>–°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${analysis.strategyName}</p>
                <p>–î–∞—Ç–∞: ${new Date(analysis.date).toLocaleString()}</p>
            </div>
            <div class="analysis-details">
        `;
        
        analysis.answers.forEach((answer, index) => {
            if (answer) {
                resultsHTML += `
                    <div class="result-item">
                        <h4>${answer.fieldName}</h4>
                        <ul>
                `;
                
                Object.values(answer.fieldValues).forEach(value => {
                    if (value) {
                        resultsHTML += `<li>${value}</li>`;
                    }
                });
                
                resultsHTML += `</ul></div>`;
            }
        });
        
        resultsHTML += `
            </div>
            <button class="btn btn--primary" onclick="startNewAnalysis()">–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</button>
        `;
        
        analysisResults.innerHTML = resultsHTML;
    }
}

function startNewAnalysis() {
    const strategySelect = document.getElementById('strategySelect');
    const cardAnalysisContainer = document.getElementById('cardAnalysisContainer');
    const analysisResults = document.getElementById('analysisResults');
    
    if (strategySelect) {
        strategySelect.value = '';
    }
    
    if (cardAnalysisContainer) {
        cardAnalysisContainer.classList.add('hidden');
    }
    
    if (analysisResults) {
        analysisResults.classList.add('hidden');
    }
    
    currentAnalysisStrategy = null;
    currentCardIndex = 0;
    analysisAnswers = [];
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤
function viewAnalysis(index) {
    console.log('üëÅÔ∏è View analysis:', index);
    alert('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
}

function deleteAnalysis(index) {
    console.log('üóëÔ∏è Delete analysis:', index);
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑?')) {
        const analysis = savedAnalyses[index];
        savedAnalyses.splice(index, 1);
        // TODO: –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        // await AnalysisDB.delete(analysis.id);
        renderAnalysesList();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.showSection = showSection;
window.openSupportModal = openSupportModal;
window.closeSupportModal = closeSupportModal;
window.openAnalysesModal = openAnalysesModal;
window.closeAnalysesModal = closeAnalysesModal;
window.openModal = openModal;
window.editStrategy = editStrategy;
window.deleteStrategy = deleteStrategy;
window.viewAnalysis = viewAnalysis;
window.deleteAnalysis = deleteAnalysis;
window.startNewAnalysis = startNewAnalysis;
window.handlePrevCard = handlePrevCard;
window.handleNextCard = handleNextCard;

console.log('‚úÖ TradeAnalyzer Simple Version loaded');
