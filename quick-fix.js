// –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å TradeAnalyzer
console.log('üîß Loading quick fix module...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function quickFix() {
    try {
        console.log('üîç Running quick diagnostic...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
        if (!window.supabase) {
            console.error('‚ùå Supabase client not available');
            alert('Supabase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return false;
        }
        
        console.log('‚úÖ Supabase client is available');
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        try {
            const { data, error } = await window.supabase
                .from('strategies')
                .select('count')
                .limit(1);
                
            if (error) {
                console.error('‚ùå Database connection error:', error);
                alert(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
                return false;
            }
            
            console.log('‚úÖ Database connection is working');
            
        } catch (err) {
            console.error('‚ùå Database connection exception:', err);
            alert('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
            return false;
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É strategies
        try {
            const { data: strategies, error } = await window.supabase
                .from('strategies')
                .select('*')
                .limit(5);
                
            if (error) {
                console.error('‚ùå Error accessing strategies table:', error);
                alert(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: ${error.message}`);
                return false;
            }
            
            console.log(`‚úÖ Strategies table accessible. Found ${strategies ? strategies.length : 0} strategies`);
            
        } catch (err) {
            console.error('‚ùå Exception accessing strategies table:', err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.');
            return false;
        }
        
        // 4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if (typeof safeLoadStrategies === 'function') {
            console.log('üîÑ Reloading strategies...');
            const loadedStrategies = await safeLoadStrategies();
            
            if (typeof strategies !== 'undefined') {
                strategies.length = 0;
                strategies.push(...loadedStrategies);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (typeof renderStrategies === 'function') {
                    renderStrategies();
                }
                
                if (typeof updateStrategySelect === 'function') {
                    updateStrategySelect();
                }
                
                console.log(`‚úÖ Strategies reloaded. Total: ${strategies.length}`);
                alert(`–ì–æ—Ç–æ–≤–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${strategies.length} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.`);
                return true;
            }
        }
        
        console.log('‚úÖ Quick fix completed successfully');
        alert('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        return true;
        
    } catch (error) {
        console.error('‚ùå Error in quickFix:', error);
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function createTestStrategy() {
    try {
        console.log('üß™ Creating test strategy...');
        
        if (!window.supabase) {
            alert('Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }
        
        const testStrategy = {
            name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ' + new Date().toLocaleTimeString(),
            description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
            fields: [
                {
                    name: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ',
                    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã',
                    inputs: [
                        {
                            type: 'select',
                            label: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å',
                            required: true,
                            options: ['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é']
                        }
                    ]
                }
            ]
        };
        
        const { data: savedStrategy, error } = await window.supabase
            .from('strategies')
            .insert(testStrategy)
            .select()
            .single();
            
        if (error) {
            console.error('‚ùå Error creating test strategy:', error);
            alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`);
            return false;
        }
        
        console.log('‚úÖ Test strategy created:', savedStrategy);
        alert('–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        await quickFix();
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Exception creating test strategy:', error);
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.quickFix = quickFix;
window.createTestStrategy = createTestStrategy;

console.log('‚úÖ Quick fix module loaded');
console.log('Available commands:');
console.log('- await quickFix() - –±—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
console.log('- await createTestStrategy() - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
