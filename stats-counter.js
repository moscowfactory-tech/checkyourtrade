// –°–ò–°–¢–ï–ú–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –ü–û–î–°–ß–ï–¢–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–ó –ë–î
console.log('üìä STATS COUNTER LOADED');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑ –ë–î
async function countAnalysesFromDB() {
    try {
        console.log('üìä Counting analyses from database...');
        
        if (!window.supabase) {
            console.error('üìä Supabase not initialized');
            return 0;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        const telegramUserId = window.getTelegramUserId ? window.getTelegramUserId() : null;
        
        let query = window.supabase
            .from('analyses')
            .select('id', { count: 'exact' });
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (telegramUserId) {
            query = query.eq('telegram_user_id', telegramUserId);
            console.log('üìä Counting analyses for user:', telegramUserId);
        } else {
            console.log('‚ö†Ô∏è No telegram user ID for analyses count');
            return 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }
        
        const { data, error } = await query;
            
        if (error) {
            console.error('üìä Error counting analyses:', error);
            return 0;
        }
        
        const count = data ? data.length : 0;
        console.log('üìä Analyses count from DB:', count);
        return count;
        
    } catch (error) {
        console.error('üìä Error in countAnalysesFromDB:', error);
        return 0;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –ë–î
async function countStrategiesFromDB() {
    try {
        console.log('üìä Counting strategies from database...');
        
        if (!window.supabase) {
            console.error('üìä Supabase not initialized');
            return 0;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        const telegramUserId = window.getTelegramUserId ? window.getTelegramUserId() : null;
        
        if (!telegramUserId) {
            console.log('‚ö†Ô∏è No telegram user ID for strategies count');
            return 0;
        }
        
        // –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π users
        let query = window.supabase
            .from('strategies')
            .select('id', { count: 'exact' })
            .eq('users.telegram_id', telegramUserId);
        
        console.log('üìä Counting strategies for telegram user:', telegramUserId);
        
        const { data, error } = await query;
            
        if (error) {
            console.error('üìä Error counting strategies:', error);
            return 0;
        }
        
        const count = data ? data.length : 0;
        console.log('üìä Strategies count from DB:', count);
        return count;
        
    } catch (error) {
        console.error('üìä Error in countStrategiesFromDB:', error);
        return 0;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
async function updateUserStats() {
    try {
        console.log('üìä Updating user stats...');
        
        const analysesCountEl = document.getElementById('analysesCount');
        const strategiesCountEl = document.getElementById('strategiesCount');
        
        if (!analysesCountEl || !strategiesCountEl) {
            console.error('üìä Stats elements not found');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        analysesCountEl.textContent = '...';
        strategiesCountEl.textContent = '...';
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const [analysesCount, strategiesCount] = await Promise.all([
            countAnalysesFromDB(),
            countStrategiesFromDB()
        ]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        analysesCountEl.textContent = analysesCount.toString();
        strategiesCountEl.textContent = strategiesCount.toString();
        
        console.log('üìä User stats updated:', {
            analyses: analysesCount,
            strategies: strategiesCount
        });
        
    } catch (error) {
        console.error('üìä Error updating user stats:', error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0
        const analysesCountEl = document.getElementById('analysesCount');
        const strategiesCountEl = document.getElementById('strategiesCount');
        
        if (analysesCountEl) analysesCountEl.textContent = '0';
        if (strategiesCountEl) strategiesCountEl.textContent = '0';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
async function incrementAnalysesCount() {
    console.log('üìä Incrementing analyses count...');
    await updateUserStats();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function incrementStrategiesCount() {
    console.log('üìä Incrementing strategies count...');
    await updateUserStats();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
async function decrementAnalysesCount() {
    console.log('üìä Decrementing analyses count...');
    await updateUserStats();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function decrementStrategiesCount() {
    console.log('üìä Decrementing strategies count...');
    await updateUserStats();
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
window.updateUserStats = updateUserStats;
window.incrementAnalysesCount = incrementAnalysesCount;
window.incrementStrategiesCount = incrementStrategiesCount;
window.decrementAnalysesCount = decrementAnalysesCount;
window.decrementStrategiesCount = decrementStrategiesCount;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìä Setting up stats counter...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    const userButton = document.getElementById('userButton');
    if (userButton) {
        userButton.addEventListener('click', function() {
            console.log('üìä Profile opened, updating stats...');
            setTimeout(updateUserStats, 200); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        });
        console.log('üìä Profile button listener added');
    } else {
        console.error('üìä userButton not found!');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase)
    setTimeout(updateUserStats, 2000);
});

console.log('üìä STATS COUNTER initialized');
