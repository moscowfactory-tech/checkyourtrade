// üèóÔ∏è –°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê RESPONSIVE DESIGN
// –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ü–ö –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

console.log('üèóÔ∏è RESPONSIVE ARCHITECTURE LOADED');

// ========================================
// 1. –î–ï–¢–ï–ö–¶–ò–Ø –£–°–¢–†–û–ô–°–¢–í
// ========================================

class DeviceDetector {
    static isMobile() {
        return window.innerWidth <= 768 || 
               /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
    
    static isTablet() {
        return window.innerWidth > 768 && window.innerWidth <= 1024;
    }
    
    static isDesktop() {
        return window.innerWidth > 1024;
    }
    
    static getDeviceType() {
        if (this.isMobile()) return 'mobile';
        if (this.isTablet()) return 'tablet';
        return 'desktop';
    }
}

// ========================================
// 2. –ê–î–ê–ü–¢–ò–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
// ========================================

class ResponsiveComponentManager {
    constructor() {
        this.components = new Map();
        this.currentDevice = DeviceDetector.getDeviceType();
        this.init();
    }
    
    init() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
        window.addEventListener('resize', this.handleResize.bind(this));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.setCSSVariables();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.initializeComponents();
        
        console.log(`üèóÔ∏è Initialized for ${this.currentDevice} device`);
    }
    
    handleResize() {
        const newDevice = DeviceDetector.getDeviceType();
        if (newDevice !== this.currentDevice) {
            console.log(`üîÑ Device changed: ${this.currentDevice} ‚Üí ${newDevice}`);
            this.currentDevice = newDevice;
            this.setCSSVariables();
            this.updateComponents();
        }
    }
    
    setCSSVariables() {
        const root = document.documentElement;
        
        switch(this.currentDevice) {
            case 'mobile':
                root.style.setProperty('--modal-width', '95vw');
                root.style.setProperty('--modal-padding', '16px');
                root.style.setProperty('--button-size', '44px');
                root.style.setProperty('--font-scale', '0.9');
                break;
            case 'tablet':
                root.style.setProperty('--modal-width', '80vw');
                root.style.setProperty('--modal-padding', '24px');
                root.style.setProperty('--button-size', '48px');
                root.style.setProperty('--font-scale', '1');
                break;
            default: // desktop
                root.style.setProperty('--modal-width', '600px');
                root.style.setProperty('--modal-padding', '32px');
                root.style.setProperty('--button-size', '52px');
                root.style.setProperty('--font-scale', '1');
        }
    }
    
    initializeComponents() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.initModals();
        this.initNavigation();
        this.initButtons();
    }
    
    updateComponents() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.components.forEach(component => {
            if (component.update) {
                component.update(this.currentDevice);
            }
        });
    }
    
    // ========================================
    // 3. –ê–î–ê–ü–¢–ò–í–ù–´–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
    // ========================================
    
    initModals() {
        const modalManager = new AdaptiveModalManager();
        this.components.set('modals', modalManager);
    }
    
    // ========================================
    // 4. –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø
    // ========================================
    
    initNavigation() {
        const navManager = new AdaptiveNavigationManager();
        this.components.set('navigation', navManager);
    }
    
    // ========================================
    // 5. –ê–î–ê–ü–¢–ò–í–ù–´–ï –ö–ù–û–ü–ö–ò
    // ========================================
    
    initButtons() {
        const buttonManager = new AdaptiveButtonManager();
        this.components.set('buttons', buttonManager);
    }
}

// ========================================
// –ê–î–ê–ü–¢–ò–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù
// ========================================

class AdaptiveModalManager {
    constructor() {
        this.modals = new Map();
        this.init();
    }
    
    init() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        const modalElements = document.querySelectorAll('[id$="Modal"], .modal');
        
        modalElements.forEach(modal => {
            this.registerModal(modal);
        });
        
        console.log(`üì± Registered ${this.modals.size} adaptive modals`);
    }
    
    registerModal(modalElement) {
        const modalId = modalElement.id;
        
        const modalConfig = {
            element: modalElement,
            openTriggers: document.querySelectorAll(`[data-modal="${modalId}"], [onclick*="${modalId}"]`),
            closeTriggers: modalElement.querySelectorAll('.close, [data-close]'),
            backdrop: modalElement
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.addModalHandlers(modalConfig);
        
        this.modals.set(modalId, modalConfig);
    }
    
    addModalHandlers(config) {
        const { element, openTriggers, closeTriggers, backdrop } = config;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
        openTriggers.forEach(trigger => {
            trigger.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.openModal(element);
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        closeTriggers.forEach(trigger => {
            trigger.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.closeModal(element);
            });
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ backdrop
        backdrop.addEventListener('click', (e) => {
            if (e.target === backdrop) {
                this.closeModal(element);
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && element.classList.contains('active')) {
                this.closeModal(element);
            }
        });
    }
    
    openModal(modalElement) {
        console.log('üì± Opening adaptive modal:', modalElement.id);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.closeAllModals();
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ
        modalElement.classList.remove('hidden');
        modalElement.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.applyDeviceStyles(modalElement);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            modalElement.style.opacity = '1';
            modalElement.style.transform = 'scale(1)';
        });
    }
    
    closeModal(modalElement) {
        console.log('üì± Closing adaptive modal:', modalElement.id);
        
        modalElement.classList.remove('active');
        modalElement.style.opacity = '0';
        modalElement.style.transform = 'scale(0.95)';
        
        setTimeout(() => {
            modalElement.classList.add('hidden');
            document.body.style.overflow = '';
        }, 300);
    }
    
    closeAllModals() {
        this.modals.forEach(config => {
            if (config.element.classList.contains('active')) {
                this.closeModal(config.element);
            }
        });
    }
    
    applyDeviceStyles(modalElement) {
        const device = DeviceDetector.getDeviceType();
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        modalElement.classList.remove('mobile-modal', 'tablet-modal', 'desktop-modal');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        modalElement.classList.add(`${device}-modal`);
    }
    
    update(deviceType) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.modals.forEach(config => {
            if (config.element.classList.contains('active')) {
                this.applyDeviceStyles(config.element);
            }
        });
    }
}

// ========================================
// –ê–î–ê–ü–¢–ò–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ù–ê–í–ò–ì–ê–¶–ò–ò
// ========================================

class AdaptiveNavigationManager {
    constructor() {
        this.init();
    }
    
    init() {
        this.setupProfileNavigation();
        this.setupMobileMenu();
        console.log('üß≠ Adaptive navigation initialized');
    }
    
    setupProfileNavigation() {
        const profileBtn = document.getElementById('userButton');
        const profileDropdown = document.getElementById('userDropdown');
        
        if (profileBtn && profileDropdown) {
            profileBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                const isHidden = profileDropdown.classList.contains('hidden');
                
                if (isHidden) {
                    this.openProfileDropdown(profileDropdown);
                } else {
                    this.closeProfileDropdown(profileDropdown);
                }
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
            document.addEventListener('click', (e) => {
                if (!profileDropdown.contains(e.target) && !profileBtn.contains(e.target)) {
                    this.closeProfileDropdown(profileDropdown);
                }
            });
            
            console.log('üë§ Profile navigation setup complete');
        }
    }
    
    openProfileDropdown(dropdown) {
        dropdown.classList.remove('hidden');
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (DeviceDetector.isMobile()) {
            dropdown.classList.add('mobile-dropdown');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (window.updateUserStats) {
            setTimeout(window.updateUserStats, 100);
        }
    }
    
    closeProfileDropdown(dropdown) {
        dropdown.classList.add('hidden');
        dropdown.classList.remove('mobile-dropdown');
    }
    
    setupMobileMenu() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (DeviceDetector.isMobile()) {
            console.log('üì± Mobile menu setup');
        }
    }
    
    update(deviceType) {
        console.log(`üß≠ Navigation updated for ${deviceType}`);
    }
}

// ========================================
// –ê–î–ê–ü–¢–ò–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ö–ù–û–ü–û–ö
// ========================================

class AdaptiveButtonManager {
    constructor() {
        this.init();
    }
    
    init() {
        this.setupAnalysisButtons();
        this.setupActionButtons();
        console.log('üîò Adaptive buttons initialized');
    }
    
    setupAnalysisButtons() {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫—Ä—É–∂–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const colorOptions = document.querySelectorAll('.color-option');
        
        colorOptions.forEach(option => {
            const circle = option.querySelector('.color-circle');
            if (circle && DeviceDetector.isMobile()) {
                circle.style.width = '60px';
                circle.style.height = '60px';
                circle.style.borderWidth = '3px';
            }
        });
    }
    
    setupActionButtons() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        const actionButtons = document.querySelectorAll('.btn, button');
        
        actionButtons.forEach(button => {
            if (DeviceDetector.isMobile()) {
                button.classList.add('mobile-button');
            }
        });
    }
    
    update(deviceType) {
        console.log(`üîò Buttons updated for ${deviceType}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫—Ä—É–∂–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        this.setupAnalysisButtons();
    }
}

// ========================================
// –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ========================================

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
window.ResponsiveManager = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.ResponsiveManager = new ResponsiveComponentManager();
    console.log('üèóÔ∏è RESPONSIVE ARCHITECTURE READY');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.DeviceDetector = DeviceDetector;
window.ResponsiveComponentManager = ResponsiveComponentManager;

console.log('üèóÔ∏è RESPONSIVE ARCHITECTURE LOADED SUCCESSFULLY');
