// –ù–∞–¥–µ–∂–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è TradeAnalyzer
console.log('üì• Loading strategies loader module...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async function loadStrategiesFromDB() {
    try {
        console.log('üîÑ Loading strategies from database...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
        if (!window.supabase) {
            console.error('‚ùå Supabase client not available');
            return { success: false, error: 'Supabase client not available', strategies: [] };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω
        if (typeof window.supabase.from !== 'function') {
            console.error('‚ùå Supabase client is not functional - missing .from() method');
            return { success: false, error: 'Supabase client is not functional', strategies: [] };
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { data: strategiesData, error } = await window.supabase
            .from('strategies')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('‚ùå Database error:', error);
            return { 
                success: false, 
                error: `Database error: ${error.message}`, 
                strategies: [] 
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const formattedStrategies = [];
        
        if (strategiesData && Array.isArray(strategiesData)) {
            for (const strategy of strategiesData) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if (!strategy.id || !strategy.name) {
                        console.warn('‚ö†Ô∏è Invalid strategy data:', strategy);
                        continue;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ fields
                    let fields = [];
                    if (strategy.fields) {
                        if (typeof strategy.fields === 'string') {
                            try {
                                fields = JSON.parse(strategy.fields);
                            } catch (parseError) {
                                console.warn('‚ö†Ô∏è Failed to parse strategy fields:', parseError);
                                fields = [];
                            }
                        } else if (Array.isArray(strategy.fields)) {
                            fields = strategy.fields;
                        }
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                    formattedStrategies.push({
                        id: strategy.id,
                        name: strategy.name,
                        description: strategy.description || '',
                        fields: fields,
                        created_at: strategy.created_at
                    });
                    
                } catch (formatError) {
                    console.warn('‚ö†Ô∏è Error formatting strategy:', formatError);
                }
            }
        }
        
        console.log(`‚úÖ Successfully loaded ${formattedStrategies.length} strategies`);
        return { 
            success: true, 
            error: null, 
            strategies: formattedStrategies 
        };
        
    } catch (error) {
        console.error('‚ùå Exception in loadStrategiesFromDB:', error);
        return { 
            success: false, 
            error: `Exception: ${error.message}`, 
            strategies: [] 
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
async function updateStrategiesInApp() {
    try {
        console.log('üîÑ Updating strategies in app...');
        
        const result = await loadStrategiesFromDB();
        
        if (!result.success) {
            console.error('‚ùå Failed to load strategies:', result.error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (typeof createInlineNotification === 'function') {
                createInlineNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: ${result.error}`, 'error', 5000);
            } else {
                console.error('CRITICAL: Failed to load strategies:', result.error);
            }
            
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é strategies
        if (typeof strategies !== 'undefined') {
            strategies.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
            strategies.push(...result.strategies); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log(`üìã Updated global strategies array with ${strategies.length} items`);
        } else {
            console.warn('‚ö†Ô∏è Global strategies variable not found');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        try {
            if (typeof renderStrategies === 'function') {
                renderStrategies();
                console.log('‚úÖ Strategies rendered');
            }
            
            if (typeof updateStrategySelect === 'function') {
                updateStrategySelect();
                console.log('‚úÖ Strategy select updated');
            }
        } catch (uiError) {
            console.error('‚ùå Error updating UI:', uiError);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (result.strategies.length > 0) {
            if (typeof createInlineNotification === 'function') {
                createInlineNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.strategies.length} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π`, 'success', 3000);
            }
        } else {
            console.log('üìù No strategies found in database');
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Exception in updateStrategiesInApp:', error);
        
        if (typeof createInlineNotification === 'function') {
            createInlineNotification('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π', 'error', 5000);
        }
        
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testDatabaseConnection() {
    try {
        console.log('üîç Testing database connection...');
        
        if (!window.supabase) {
            return { success: false, error: 'Supabase client not available' };
        }
        
        if (typeof window.supabase.from !== 'function') {
            return { success: false, error: 'Supabase client is not functional' };
        }
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const { data, error } = await window.supabase
            .from('strategies')
            .select('count')
            .limit(1);
        
        if (error) {
            return { success: false, error: error.message };
        }
        
        console.log('‚úÖ Database connection test successful');
        return { success: true, error: null };
        
    } catch (error) {
        console.error('‚ùå Database connection test failed:', error);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
async function initializeStrategiesLoader() {
    try {
        console.log('üöÄ Initializing strategies loader...');
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
        let attempts = 0;
        const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥
        
        while ((!window.supabase || typeof window.supabase.from !== 'function') && attempts < maxAttempts) {
            console.log(`‚è≥ Waiting for functional Supabase client... (${attempts + 1}/${maxAttempts})`);
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        if (!window.supabase || typeof window.supabase.from !== 'function') {
            console.error('‚ùå Functional Supabase client not available after waiting');
            return false;
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const connectionTest = await testDatabaseConnection();
        if (!connectionTest.success) {
            console.error('‚ùå Database connection failed:', connectionTest.error);
            
            if (typeof createInlineNotification === 'function') {
                createInlineNotification(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${connectionTest.error}`, 'error', 5000);
            }
            
            return false;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        const success = await updateStrategiesInApp();
        
        if (success) {
            console.log('‚úÖ Strategies loader initialized successfully');
        } else {
            console.error('‚ùå Failed to initialize strategies loader');
        }
        
        return success;
        
    } catch (error) {
        console.error('‚ùå Exception in initializeStrategiesLoader:', error);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.loadStrategiesFromDB = loadStrategiesFromDB;
window.updateStrategiesInApp = updateStrategiesInApp;
window.testDatabaseConnection = testDatabaseConnection;
window.initializeStrategiesLoader = initializeStrategiesLoader;

console.log('‚úÖ Strategies loader module loaded');
console.log('Available functions:');
console.log('- await loadStrategiesFromDB() - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –ë–î');
console.log('- await updateStrategiesInApp() - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
console.log('- await testDatabaseConnection() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î');
console.log('- await initializeStrategiesLoader() - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫');
